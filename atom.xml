<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guojun Wang&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://itwanggj.github.io/"/>
  <updated>2017-04-05T15:18:05.000Z</updated>
  <id>https://itwanggj.github.io/</id>
  
  <author>
    <name>Guojun Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊聊JS那些事--继承</title>
    <link href="https://itwanggj.github.io/2017/04/05/%E8%81%8A%E8%81%8AJS%E9%82%A3%E4%BA%9B%E4%BA%8B--%E7%BB%A7%E6%89%BF/"/>
    <id>https://itwanggj.github.io/2017/04/05/聊聊JS那些事--继承/</id>
    <published>2017-04-05T15:51:19.000Z</published>
    <updated>2017-04-05T15:18:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、思考"><a href="#1、思考" class="headerlink" title="1、思考"></a>1、思考</h2><p>我记得初学js时，最难懂的概念就是js的原型，而且这个概念在笔试面试中常常提到，因此今天我们把这个概念拿出来，好好聊一聊。</p>
<p>在仔细讲解之前，我们先来看一道题，这道题来自JavaScript高级程序设计中原型链那一节：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">alert(instance.getSuperValue());</div></pre></td></tr></table></figure></p>
<p>请大家猜一猜最后alert出的结果是什么？</p>
<p>大家先思考一下再看下面的内容。</p>
<h2 id="2、知识点"><a href="#2、知识点" class="headerlink" title="2、知识点"></a>2、知识点</h2><p>如果上面的题没解出来，也不要灰心丧气，因为有可能有的人解出来的结果也不一定对。要想弄明白原型等一系列概念，其实只需要记住这几个知识点。</p>
<h3 id="2-1-先弄懂什么是prototype以及proto"><a href="#2-1-先弄懂什么是prototype以及proto" class="headerlink" title="2.1 先弄懂什么是prototype以及proto"></a>2.1 先弄懂什么是prototype以及<em>proto</em></h3><p><em>proto</em>:任何一个对象Object都有<em>proto</em>，它是每一个对象的私有属性，是天生自带的。<br>prototype:不是任何对象都有prototype，只有构造函数有prototype，是后天赋予的。</p>
<h3 id="2-2-什么是原型链查找"><a href="#2-2-什么是原型链查找" class="headerlink" title="2.2 什么是原型链查找"></a>2.2 什么是原型链查找</h3><p>其实只需要记住一句话：调用一个对象的属性或方法，一但这个对象中没有，就去这个对象的<em>proto</em>中查找。这个对象的<em>proto</em>指向自己构造函数的prototype属性<br>然后我们来看一张图：<br><img src="" alt=""><br>再来看一个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.sleep = <span class="string">'Zzzzz...'</span></div><div class="line">&#125;</div><div class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> zhangsan = <span class="keyword">new</span> Person();</div><div class="line">zhangsan.sayHello();</div></pre></td></tr></table></figure></p>
<p>其实zhangsan这个对象下面只有一个sleep属性，是没有sayHello方法的。<br>但是通过原型链查找会查zhangsan.<em>proto</em>也就是查找它的构造函数的Person.prototype，Person.prototype下有sayHello这个方法，所以会在控制台输出hello world<br>所以啦，万变不离其宗！</p>
<h2 id="3、几种继承方式"><a href="#3、几种继承方式" class="headerlink" title="3、几种继承方式"></a>3、几种继承方式</h2><p>除了最新的ES6外，js其实是没有继承和类的概念的，因此想要达到js的继承就要通过模拟的方式。这里将主要介绍三种继承的方式：纯原型链继承，借用构造函数继承，组合继承：</p>
<h3 id="3-1-纯原型链继承"><a href="#3-1-纯原型链继承" class="headerlink" title="3.1 纯原型链继承"></a>3.1 纯原型链继承</h3><p>多说无益，来个简单暴力直接的方式，直接上代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.likeFood= [<span class="string">'牛排'</span>,<span class="string">'饺子'</span>,<span class="string">'啤酒'</span>,<span class="string">'可乐'</span>]</div><div class="line">&#125;</div><div class="line">Father.prototype.saylikeFood = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.likeFood);  </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Son.prototype = <span class="keyword">new</span> Father();</div><div class="line"></div><div class="line"><span class="keyword">var</span> zhangsan = <span class="keyword">new</span> Son();</div><div class="line">zhangsan.likeFood.push(<span class="string">'西瓜'</span>);</div><div class="line">zhangsan.saylikeFood(); <span class="comment">// ["牛排", "饺子", "啤酒", "可乐", "西瓜"]</span></div></pre></td></tr></table></figure></p>
<p>Ok，这就是纯原型链的继承方式，其实说白了就是把继承的对象的prototype等于继承自构造函数的实例。<br>但是这样的方式有问题。接着上面的代码的后面我们再写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lisi = <span class="keyword">new</span> Son();</div><div class="line">lisi.saylikeFood(); <span class="comment">// ["牛排", "饺子", "啤酒", "可乐", "西瓜"]</span></div></pre></td></tr></table></figure></p>
<p>看出问题了吧，zhangsan直接修改了其构造函数的likeFood，<br>导致我们再实例的对象也收到了修改的影响，<br>因此这种继承方式有缺陷</p>
<h3 id="3-2-借用构造函数继承"><a href="#3-2-借用构造函数继承" class="headerlink" title="3.2 借用构造函数继承"></a>3.2 借用构造函数继承</h3><p>还是多说无益，我们直接来看例子，上代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">    Father.call(<span class="keyword">this</span>, name);</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> zhangsan = <span class="keyword">new</span> Son(<span class="string">'zhangsan'</span>, <span class="number">17</span>);</div></pre></td></tr></table></figure></p>
<p>这种继承方式并没有利用到原型以及原型链的概念，它主要利用call的特性，call的第一个参数传入this，后面的参数传入函数所需的参数。<br>这种方式归根结底其实就是在实例一个对象的时候，向这个对象的上面添加所需的属性和方法。<br>不信的话可以输出zhangsan看一下</p>
<p>但是其实这种方式也有问题，什么问题呢？<br>按照这种方式，每次new一个对象，就是实例化一个对象，都会向这个对象身上添加一堆属性和方法。<br>添加属性是没问题的，但是每次在对象身上添加的方法，这个函数就要重写一次。<br>函数不能进行复用，这就是最大的问题！</p>
<h3 id="3-3-组合继承"><a href="#3-3-组合继承" class="headerlink" title="3.3 组合继承"></a>3.3 组合继承</h3><p>这次要多说两句，组合继承其实分别是拥有以上两种方法的优点，同时也规避了以上两种方法的缺点。这种方法的应用是最广泛的，是最普遍的，举个栗子来看一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">Farther.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">    Farther.call(<span class="keyword">this</span>, name);</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Son.prototype = <span class="keyword">new</span> Father();</div><div class="line">Son.constructor = Son;</div><div class="line">Son.prototype.sayage = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> zhangsan = <span class="keyword">new</span> Son();</div></pre></td></tr></table></figure></p>
<p>来看一下，这种方式不错吧！<br>其实除了组合继承外，还有两种继承方式：原型式继承和寄生式继承.<br>(后续会详细分享原型式继承与寄生式继承)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、思考&quot;&gt;&lt;a href=&quot;#1、思考&quot; class=&quot;headerlink&quot; title=&quot;1、思考&quot;&gt;&lt;/a&gt;1、思考&lt;/h2&gt;&lt;p&gt;我记得初学js时，最难懂的概念就是js的原型，而且这个概念在笔试面试中常常提到，因此今天我们把这个概念拿出来，好好聊一聊。&lt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/categories/JavaScript/"/>
    
      <category term="继承" scheme="https://itwanggj.github.io/categories/JavaScript/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="原型" scheme="https://itwanggj.github.io/categories/JavaScript/%E7%BB%A7%E6%89%BF/%E5%8E%9F%E5%9E%8B/"/>
    
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="https://itwanggj.github.io/tags/CSS3/"/>
    
      <category term="html" scheme="https://itwanggj.github.io/tags/html/"/>
    
      <category term="HTML5" scheme="https://itwanggj.github.io/tags/HTML5/"/>
    
      <category term="继承" scheme="https://itwanggj.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript继承机制的设计思想</title>
    <link href="https://itwanggj.github.io/2017/04/05/Javascript%E7%BB%A7%E6%89%BF%E6%9C%BA%E5%88%B6%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    <id>https://itwanggj.github.io/2017/04/05/Javascript继承机制的设计思想/</id>
    <published>2017-04-05T13:17:10.000Z</published>
    <updated>2017-04-05T13:51:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>我一直很难理解Javascript语言的继承机制。<br>它没有”子类”和”父类”的概念，也没有”类”（class）和”实例”（instance）的区分，全靠一种很奇特的”原型链”（prototype）模式，来实现继承。<br>我花了很多时间，学习这个部分，还做了很多笔记。但是都属于强行记忆，无法从根本上理解。<br><img src="https://itwanggj.github.io/images/bg2011060501.jpg" alt=""><br>下面，我尝试用自己的语言，来解释它的设计思想。彻底说明白prototype对象到底是怎么回事。其实根本就没那么复杂，真相非常简单。</p>
<h2 id="1、从历史说起"><a href="#1、从历史说起" class="headerlink" title="1、从历史说起"></a>1、从历史说起</h2><p>要理解Javascript的设计思想，必须从它的诞生说起。<br>1994年，网景公司（Netscape）发布了Navigator浏览器0.9版。这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。比如，如果网页上有一栏”用户名”要求填写，浏览器就无法判断访问者是否真的填写了，只有让服务器端判断。如果没有填写，服务器端就返回错误，要求用户重新填写，这太浪费时间和服务器资源了。<br><a id="more"></a><br><img src="https://itwanggj.github.io/images/bg2011060502.png" alt=""><br>因此，网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。工程师Brendan Eich负责开发这种新语言。他觉得，没必要设计得很复杂，这种语言只要能够完成一些简单操作就够了，比如判断用户有没有填写表单。<br><img src="https://itwanggj.github.io/images/bg2011060503.jpg" alt=""><br>1994年正是面向对象编程最兴盛的时期，C++是当时最流行的语言，而Java语言的1.0版即将于第二年推出，Sun公司正在大肆造势。<br>Brendan Eich无疑受到了影响，Javascript里面所有的数据类型都是对象（object），这一点与Java非常相似。但是，他随即就遇到了一个难题，到底要不要设计”继承”机制呢？</p>
<h2 id="2、Brendan-Eich的选择"><a href="#2、Brendan-Eich的选择" class="headerlink" title="2、Brendan Eich的选择"></a>2、Brendan Eich的选择</h2><p>如果真的是一种简易的脚本语言，其实不需要有”继承”机制。但是，Javascript里面都是对象，必须有一种机制，将所有对象联系起来。所以，Brendan Eich最后还是设计了”继承”。<br>但是，他不打算引入”类”（class）的概念，因为一旦有了”类”，Javascript就是一种完整的面向对象编程语言了，这好像有点太正式了，而且增加了初学者的入门难度。<br>他考虑到，C++和Java语言都使用new命令，生成实例。<br>C++的写法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ClassName *object = new ClassName(param);</div></pre></td></tr></table></figure></p>
<p>Java的写法是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Foo foo = <span class="keyword">new</span> Foo();</div></pre></td></tr></table></figure></p>
<p>因此，他就把new命令引入了Javascript，用来从原型对象生成一个实例对象。但是，Javascript没有”类”，怎么来表示原型对象呢？<br>这时，他想到C++和Java使用new命令时，都会调用”类”的构造函数（constructor）。他就做了一个简化的设计，在Javascript语言中，new命令后面跟的不是类，而是构造函数。<br>举例来说，现在有一个叫做DOG的构造函数，表示狗对象的原型。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DOG</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">　　<span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对这个构造函数使用new，就会生成一个狗对象的实例。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dogA = <span class="keyword">new</span> DOG(<span class="string">'大毛'</span>);</div><div class="line">alert(dogA.name); <span class="comment">// 大毛</span></div></pre></td></tr></table></figure></p>
<p>注意构造函数中的this关键字，它就代表了新创建的实例对象。</p>
<h2 id="3、new运算符的缺点"><a href="#3、new运算符的缺点" class="headerlink" title="3、new运算符的缺点"></a>3、new运算符的缺点</h2><p>用构造函数生成实例对象，有一个缺点，那就是无法共享属性和方法。<br>比如，在DOG对象的构造函数中，设置一个实例对象的共有属性species。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DOG</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">　　<span class="keyword">this</span>.name = name;</div><div class="line">　　<span class="keyword">this</span>.species = <span class="string">'犬科'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，生成两个实例对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dogA = <span class="keyword">new</span> DOG(<span class="string">'大毛'</span>);</div><div class="line"><span class="keyword">var</span> dogB = <span class="keyword">new</span> DOG(<span class="string">'二毛'</span>);</div></pre></td></tr></table></figure></p>
<p>这两个对象的species属性是独立的，修改其中一个，不会影响到另一个。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dogA.species = <span class="string">'猫科'</span>;</div><div class="line">alert(dogB.species); <span class="comment">// 显示"犬科"，不受dogA的影响</span></div></pre></td></tr></table></figure></p>
<p>每一个实例对象，都有自己的属性和方法的副本。这不仅无法做到数据共享，也是极大的资源浪费。</p>
<h2 id="4、prototype属性的引入"><a href="#4、prototype属性的引入" class="headerlink" title="4、prototype属性的引入"></a>4、prototype属性的引入</h2><p>考虑到这一点，Brendan Eich决定为构造函数设置一个prototype属性。<br>这个属性包含一个对象（以下简称”prototype对象”），所有实例对象需要共享的属性和方法，都放在这个对象里面；那些不需要共享的属性和方法，就放在构造函数里面。<br>实例对象一旦创建，将自动引用prototype对象的属性和方法。也就是说，实例对象的属性和方法，分成两种，一种是本地的，另一种是引用的。<br>还是以DOG构造函数为例，现在用prototype属性进行改写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DOG</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">　 <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line">DOG.prototype = &#123; <span class="attr">species</span> : <span class="string">'犬科'</span> &#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dogA = <span class="keyword">new</span> DOG(<span class="string">'大毛'</span>);</div><div class="line"><span class="keyword">var</span> dogB = <span class="keyword">new</span> DOG(<span class="string">'二毛'</span>);</div><div class="line"></div><div class="line">alert(dogA.species); <span class="comment">// 犬科</span></div><div class="line">alert(dogB.species); <span class="comment">// 犬科</span></div></pre></td></tr></table></figure></p>
<p>现在，species属性放在prototype对象里，是两个实例对象共享的。只要修改了prototype对象，就会同时影响到两个实例对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DOG.prototype.species = <span class="string">'猫科'</span>;</div><div class="line"></div><div class="line">alert(dogA.species); <span class="comment">// 猫科</span></div><div class="line">alert(dogB.species); <span class="comment">// 猫科</span></div></pre></td></tr></table></figure>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>由于所有的实例对象共享同一个prototype对象，那么从外界看起来，prototype对象就好像是实例对象的原型，而实例对象则好像”继承”了prototype对象一样。<br>这就是Javascript继承机制的设计思想。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我一直很难理解Javascript语言的继承机制。&lt;br&gt;它没有”子类”和”父类”的概念，也没有”类”（class）和”实例”（instance）的区分，全靠一种很奇特的”原型链”（prototype）模式，来实现继承。&lt;br&gt;我花了很多时间，学习这个部分，还做了很多笔记。但是都属于强行记忆，无法从根本上理解。&lt;br&gt;&lt;img src=&quot;https://itwanggj.github.io/images/bg2011060501.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;下面，我尝试用自己的语言，来解释它的设计思想。彻底说明白prototype对象到底是怎么回事。其实根本就没那么复杂，真相非常简单。&lt;/p&gt;
&lt;h2 id=&quot;1、从历史说起&quot;&gt;&lt;a href=&quot;#1、从历史说起&quot; class=&quot;headerlink&quot; title=&quot;1、从历史说起&quot;&gt;&lt;/a&gt;1、从历史说起&lt;/h2&gt;&lt;p&gt;要理解Javascript的设计思想，必须从它的诞生说起。&lt;br&gt;1994年，网景公司（Netscape）发布了Navigator浏览器0.9版。这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。比如，如果网页上有一栏”用户名”要求填写，浏览器就无法判断访问者是否真的填写了，只有让服务器端判断。如果没有填写，服务器端就返回错误，要求用户重新填写，这太浪费时间和服务器资源了。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/categories/JavaScript/"/>
    
      <category term="继承" scheme="https://itwanggj.github.io/categories/JavaScript/%E7%BB%A7%E6%89%BF/"/>
    
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="https://itwanggj.github.io/tags/CSS3/"/>
    
      <category term="html" scheme="https://itwanggj.github.io/tags/html/"/>
    
      <category term="HTML5" scheme="https://itwanggj.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>深入理解javascript原型和闭包（转）</title>
    <link href="https://itwanggj.github.io/2017/03/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript%E5%8E%9F%E5%9E%8B%E5%92%8C%E9%97%AD%E5%8C%85/"/>
    <id>https://itwanggj.github.io/2017/03/01/深入理解javascript原型和闭包/</id>
    <published>2017-03-01T15:48:53.000Z</published>
    <updated>2017-03-02T11:40:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>　　该教程绕开了javascript的一些基本的语法知识，直接讲解javascript中最难理解的两个部分，也是和其他主流面向对象语言区别最大的两个部分——原型和闭包，当然，肯定少不了原型链和作用域链。帮你揭开javascript最神秘的面纱。</p>
<p>　　为什么要偏偏要讲这两个知识点？</p>
<p>　　这是我在这么多年学习javascript的经历中，认为最难理解、最常犯错的地方，学习这两个知识点，会让你对javascript有更深层次的理解，至少理解了原型和作用域，就不能再算是javascript菜鸟了。另外，这两方面也是javascript与其他语言不同的地方，学习这样的设计，有助于你开阔眼界，帮助你了解编程语言的设计思路。毕竟，你不能只把眼睛盯在一门语言上。</p>
<p>　　闲话不多讲，相信奔着这个话题来的朋友，也知道javascript原型和作用域的重要性。<br><a id="more"></a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3977987.html" target="_blank" rel="external">深入理解javascript原型和闭包（1）——一切都是对象</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3978035.html" target="_blank" rel="external">深入理解javascript原型和闭包（2）——函数和对象的关系</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3978131.html" target="_blank" rel="external">深入理解javascript原型和闭包（3）——prototype原型</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3979290.html" target="_blank" rel="external">深入理解javascript原型和闭包（4）——隐式原型</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3979533.html" target="_blank" rel="external">深入理解javascript原型和闭包（5）——instanceof</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3979985.html" target="_blank" rel="external">深入理解javascript原型和闭包（6）——继承</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3980065.html" target="_blank" rel="external">深入理解javascript原型和闭包（7）——原型的灵活性</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3986420.html" target="_blank" rel="external">深入理解javascript原型和闭包（8）——简述【执行上下文】上</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3987563.html" target="_blank" rel="external">深入理解javascript原型和闭包（9）——简述【执行上下文】下</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3988422.html" target="_blank" rel="external">深入理解javascript原型和闭包（10）——this</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3989357.html" target="_blank" rel="external">深入理解javascript原型和闭包（11）——执行上下文栈</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3991151.html" target="_blank" rel="external">深入理解javascript原型和闭包（12）——简介【作用域】</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3991995.html" target="_blank" rel="external">深入理解javascript原型和闭包（13）-【作用域】和【上下文环境】</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3992795.html" target="_blank" rel="external">深入理解javascript原型和闭包（14）——从【自由变量】到【作用域链】</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3994065.html" target="_blank" rel="external">深入理解javascript原型和闭包（15）——闭包</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3994950.html" target="_blank" rel="external">深入理解javascript原型和闭包（16）——完结</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/3996037.html" target="_blank" rel="external">深入理解javascript原型和闭包（17）——补this</a></li>
<li><a href="http://www.cnblogs.com/wangfupeng1988/p/4000798.html" target="_blank" rel="external">深入理解javascript原型和闭包（18）——补充：上下文环境和作用域的关系</a></li>
</ul>
<p>说明：原文转载于<a href="http://www.cnblogs.com/wangfupeng1988/p/3977924.html" target="_blank" rel="external">深入理解javascript原型和闭包（完结）</a>,非常感谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;　　该教程绕开了javascript的一些基本的语法知识，直接讲解javascript中最难理解的两个部分，也是和其他主流面向对象语言区别最大的两个部分——原型和闭包，当然，肯定少不了原型链和作用域链。帮你揭开javascript最神秘的面纱。&lt;/p&gt;
&lt;p&gt;　　为什么要偏偏要讲这两个知识点？&lt;/p&gt;
&lt;p&gt;　　这是我在这么多年学习javascript的经历中，认为最难理解、最常犯错的地方，学习这两个知识点，会让你对javascript有更深层次的理解，至少理解了原型和作用域，就不能再算是javascript菜鸟了。另外，这两方面也是javascript与其他语言不同的地方，学习这样的设计，有助于你开阔眼界，帮助你了解编程语言的设计思路。毕竟，你不能只把眼睛盯在一门语言上。&lt;/p&gt;
&lt;p&gt;　　闲话不多讲，相信奔着这个话题来的朋友，也知道javascript原型和作用域的重要性。&lt;br&gt;
    
    </summary>
    
      <category term="原型" scheme="https://itwanggj.github.io/categories/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="闭包" scheme="https://itwanggj.github.io/categories/%E5%8E%9F%E5%9E%8B/%E9%97%AD%E5%8C%85/"/>
    
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/tags/JavaScript/"/>
    
      <category term="原型" scheme="https://itwanggj.github.io/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="闭包" scheme="https://itwanggj.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>聊聊JS那些事--闭包</title>
    <link href="https://itwanggj.github.io/2017/02/24/%E8%81%8A%E8%81%8AJS%E9%82%A3%E4%BA%9B%E4%BA%8B--%E9%97%AD%E5%8C%85/"/>
    <id>https://itwanggj.github.io/2017/02/24/聊聊JS那些事--闭包/</id>
    <published>2017-02-24T14:12:34.000Z</published>
    <updated>2017-03-02T12:06:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。</p>
<h2 id="一、变量的作用域"><a href="#一、变量的作用域" class="headerlink" title="一、变量的作用域"></a>一、变量的作用域</h2><p>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域无非就是两种：全局变量和局部变量。<br>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　alert(n);</div><div class="line">&#125;</div><div class="line">f1(); <span class="comment">// 999</span></div></pre></td></tr></table></figure></p>
<p>另一方面，在函数外部自然无法读取函数内的局部变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">&#125;</div><div class="line">alert(n); <span class="comment">// error</span></div></pre></td></tr></table></figure></p>
<p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　n=<span class="number">999</span>;</div><div class="line">&#125;</div><div class="line">f1();</div><div class="line">alert(n); <span class="comment">// 999</span></div></pre></td></tr></table></figure></p>
<h2 id="二、如何从外部读取局部变量？"><a href="#二、如何从外部读取局部变量？" class="headerlink" title="二、如何从外部读取局部变量？"></a>二、如何从外部读取局部变量？</h2><p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，正常情况下，这是办不到的，只有通过变通方法才能实现。<br>那就是在函数的内部，再定义一个函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　alert(n); <span class="comment">// 999</span></div><div class="line">　　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的”链式作用域”结构，子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。<br>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们就可以在f1外部读取它的内部变量了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　alert(n); </div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=f1();</div><div class="line">result(); <span class="comment">// 999</span></div></pre></td></tr></table></figure></p>
<h2 id="三、闭包的概念"><a href="#三、闭包的概念" class="headerlink" title="三、闭包的概念"></a>三、闭包的概念</h2><p>上面代码中的f2函数，就是闭包。<br>各种JS书籍中的”闭包”定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。<br>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<h2 id="四、闭包的用途"><a href="#四、闭包的用途" class="headerlink" title="四、闭包的用途"></a>四、闭包的用途</h2><p>闭包可以用在许多地方。它的最大用处有两个：</p>
<ol>
<li>前面提到的可以读取函数内部的变量；</li>
<li>让这些变量的值始终保持在内存中。</li>
</ol>
<p>怎么来理解这句话呢？请看下面的代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　alert(n);</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=f1();</div><div class="line">result(); <span class="comment">// 999</span></div><div class="line">nAdd();</div><div class="line">result(); <span class="comment">// 1000</span></div></pre></td></tr></table></figure></p>
<h3 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h3><p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。<br>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制回收。<br>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数，而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<h2 id="五、使用闭包的注意点"><a href="#五、使用闭包的注意点" class="headerlink" title="五、使用闭包的注意点"></a>五、使用闭包的注意点</h2><ol>
<li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li>
<li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象使用，把闭包当作它的公用方法，把内部变量当作它的私有属性，这时一定要小心，不要随便改变父函数内部变量的值。</li>
</ol>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>代码片段一：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　 　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　 　 <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">　　　 &#125;;</div><div class="line">　　&#125;</div><div class="line">&#125;;</div><div class="line">alert(object.getNameFunc()());</div></pre></td></tr></table></figure></p>
<p>代码片段二：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">　　<span class="attr">name</span> : <span class="string">"My Object"</span>,</div><div class="line">　　<span class="attr">getNameFunc</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="keyword">return</span> that.name;</div><div class="line">　　　　&#125;;</div><div class="line">　　&#125;</div><div class="line">&#125;;</div><div class="line">alert(object.getNameFunc()());</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。&lt;/p&gt;
&lt;h2 id=&quot;一、变量的作用域&quot;&gt;&lt;a href=&quot;#一、变量的作用域&quot; class=&quot;headerlink&quot; title=&quot;一、变量的作用域&quot;&gt;&lt;/a&gt;一、变量的作用域&lt;/h2&gt;&lt;p&gt;要理解闭包，首先必须理解Javascript特殊的变量作用域。&lt;br&gt;变量的作用域无非就是两种：全局变量和局部变量。&lt;br&gt;Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; n=&lt;span class=&quot;number&quot;&gt;999&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　alert(n);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f1(); &lt;span class=&quot;comment&quot;&gt;// 999&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另一方面，在函数外部自然无法读取函数内的局部变量。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; n=&lt;span class=&quot;number&quot;&gt;999&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(n); &lt;span class=&quot;comment&quot;&gt;// error&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　n=&lt;span class=&quot;number&quot;&gt;999&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f1();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;alert(n); &lt;span class=&quot;comment&quot;&gt;// 999&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、如何从外部读取局部变量？&quot;&gt;&lt;a href=&quot;#二、如何从外部读取局部变量？&quot; class=&quot;headerlink&quot; title=&quot;二、如何从外部读取局部变量？&quot;&gt;&lt;/a&gt;二、如何从外部读取局部变量？&lt;/h2&gt;&lt;p&gt;出于种种原因，我们有时候需要得到函数内的局部变量。但是，正常情况下，这是办不到的，只有通过变通方法才能实现。&lt;br&gt;那就是在函数的内部，再定义一个函数。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; n=&lt;span class=&quot;number&quot;&gt;999&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　　　alert(n); &lt;span class=&quot;comment&quot;&gt;// 999&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;　　&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://itwanggj.github.io/categories/Javascript/"/>
    
      <category term="闭包" scheme="https://itwanggj.github.io/categories/Javascript/%E9%97%AD%E5%8C%85/"/>
    
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/tags/JavaScript/"/>
    
      <category term="CSS" scheme="https://itwanggj.github.io/tags/CSS/"/>
    
      <category term="Html" scheme="https://itwanggj.github.io/tags/Html/"/>
    
      <category term="闭包" scheme="https://itwanggj.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>聊聊JS那些事--位置</title>
    <link href="https://itwanggj.github.io/2017/02/12/%E8%81%8A%E8%81%8AJS%E9%82%A3%E4%BA%9B%E4%BA%8B--%E4%BD%8D%E7%BD%AE/"/>
    <id>https://itwanggj.github.io/2017/02/12/聊聊JS那些事--位置/</id>
    <published>2017-02-12T04:32:24.000Z</published>
    <updated>2017-03-02T12:24:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-元素的偏移量"><a href="#1-元素的偏移量" class="headerlink" title="1.元素的偏移量"></a>1.元素的偏移量</h2><p>元素的偏移量包括元素在屏幕上占用的所有可见的空间。元素的可见大小由其高度、宽度决定，包括所有内边距、滚动条和边框大小（注意：这里并不包括外边距）。<br><img src="https://itwanggj.github.io/images/offset_table.png" alt=""><br><img src="https://itwanggj.github.io/images/offset.png" alt=""></p>
<h2 id="2-客户区大小"><a href="#2-客户区大小" class="headerlink" title="2.客户区大小"></a>2.客户区大小</h2><p>元素的客户区大小指的是元素内容机器内边距占据空间的大小。<br><img src="https://itwanggj.github.io/images/client_table.png" alt=""><br><a id="more"></a><br><img src="https://itwanggj.github.io/images/client.png" alt=""><br>要确定浏览器可见窗口的大小，可以使用document.documentElement或document.body（IE7之前的版本中）。</p>
<p>从以上两个我们可以看出元素偏移量（offset）与客户区大小（client）的区别在于有没有包含边框，客户区大小不包含边框。</p>
<h2 id="3-滚动大小"><a href="#3-滚动大小" class="headerlink" title="3.滚动大小"></a>3.滚动大小</h2><p><img src="https://itwanggj.github.io/images/scroll_table.png" alt=""><br>scrollWidth和scrollHeight主要用于确定元素内容的实际大小。所以带有垂直滚动条的页面总高度就是document.documentElement.scrollHeight。<br><img src="https://itwanggj.github.io/images/scroll.png" alt=""></p>
<h2 id="4-窗口大小"><a href="#4-窗口大小" class="headerlink" title="4.窗口大小"></a>4.窗口大小</h2><p>在现代主流浏览器中提供了四个属性确定窗口的大小，分别为：innerWidth、innerHeight、outerWidth和outerHeight。</p>
<h3 id="4-1-outerWidth和outerHeight"><a href="#4-1-outerWidth和outerHeight" class="headerlink" title="4.1. outerWidth和outerHeight"></a>4.1. outerWidth和outerHeight</h3><p>返回浏览器窗口本身的尺寸（无论是从外层的window对象还是从某个框架访问）</p>
<h3 id="4-2-innerWidth和innerHeight"><a href="#4-2-innerWidth和innerHeight" class="headerlink" title="4.2. innerWidth和innerHeight"></a>4.2. innerWidth和innerHeight</h3><p>返回该容器中页面试图去的大小（减去边框宽度）</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>这里在《javascript高级程序设计》（第三版）中写道在chrome中outer与inner返回的值是一样的，这算是chrome的一个bug，我在chrome 53中已经修复，但是在QQ浏览器中（内核为chromium47）依旧是相等的，这需要注意！<br>clientWidth和clientHeight。</p>
<p>在主流浏览器中，document.docuementElement.clientWidth和document.documentElement.clientHeight中保存的是页面视口信息。返回的值与window.innerHeight，window.innerWidth一样。<br>但是window.innerHeight在IE8及以下浏览器中结果是undefined，而document.documentElement.clientHeight还有值。所以在各个浏览器下取得页面视口大小的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pageWidth=<span class="built_in">window</span>.innerWidth,</div><div class="line">    pageHeight=<span class="built_in">window</span>.innerHeight;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> pageWidth !== <span class="string">'number'</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.compatMode === <span class="string">'CSS1Compat'</span>)&#123;</div><div class="line">        pageWidth=<span class="built_in">document</span>.documentElement.clientWidth;</div><div class="line">        pageHeight=<span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        pageWidth=<span class="built_in">document</span>.body.clientWidth;</div><div class="line">        pageHeight=<span class="built_in">document</span>.body.clientHeight;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码中document.compatMode用于判断浏览器处于什么模式，它有两个值：</p>
<ul>
<li>BackCompat:浏览器处于怪异模式</li>
<li>CSS1Compat:浏览器处于标准模式</li>
</ul>
<p>不同模式下，获取浏览器的宽度的方法不同，在代码中已经做了判断。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-元素的偏移量&quot;&gt;&lt;a href=&quot;#1-元素的偏移量&quot; class=&quot;headerlink&quot; title=&quot;1.元素的偏移量&quot;&gt;&lt;/a&gt;1.元素的偏移量&lt;/h2&gt;&lt;p&gt;元素的偏移量包括元素在屏幕上占用的所有可见的空间。元素的可见大小由其高度、宽度决定，包括所有内边距、滚动条和边框大小（注意：这里并不包括外边距）。&lt;br&gt;&lt;img src=&quot;https://itwanggj.github.io/images/offset_table.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://itwanggj.github.io/images/offset.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-客户区大小&quot;&gt;&lt;a href=&quot;#2-客户区大小&quot; class=&quot;headerlink&quot; title=&quot;2.客户区大小&quot;&gt;&lt;/a&gt;2.客户区大小&lt;/h2&gt;&lt;p&gt;元素的客户区大小指的是元素内容机器内边距占据空间的大小。&lt;br&gt;&lt;img src=&quot;https://itwanggj.github.io/images/client_table.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://itwanggj.github.io/categories/Javascript/"/>
    
      <category term="偏移量" scheme="https://itwanggj.github.io/categories/Javascript/%E5%81%8F%E7%A7%BB%E9%87%8F/"/>
    
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/tags/JavaScript/"/>
    
      <category term="CSS" scheme="https://itwanggj.github.io/tags/CSS/"/>
    
      <category term="Html" scheme="https://itwanggj.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>来自CSS3的黑科技－－如何实现环形进度条</title>
    <link href="https://itwanggj.github.io/2017/02/08/%E6%9D%A5%E8%87%AACSS3%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80%EF%BC%8D%EF%BC%8D%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%8E%AF%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>https://itwanggj.github.io/2017/02/08/来自CSS3的黑科技－－如何实现环形进度条/</id>
    <published>2017-02-08T09:49:50.000Z</published>
    <updated>2017-02-26T13:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3的提出使得CSS不再是单纯的样式表，只要运用得到，就可以实现一些我们很棒的动画效果，最近项目有需求需要实现一个环形进度条，一开始没有思路，在看了《CSS Secret》之后觉得有受启发，便记录下这个过程。在过去，实现一个这样的进度条难免要拼接大量图片，CSS3和HTML5的出现使得这个过程变得简单无比。<br>首先，我们需要一个元素来承载我们的样式：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pie"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>事实上，如果要实现环形图，只要实现饼图，然后在其上覆盖一层遮罩即可，所以我们可以先从如何实现饼图开始：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.pie</span> &#123;</div><div class="line">    <span class="attribute">width </span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height </span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ddd</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们首先通过.pie实现了一个圆形，并将其居中方便我们进行观察，效果如下：</p>
<p><img src="https://itwanggj.github.io/images/circle-step-1.png" alt=""></p>
<a id="more"></a>
<p>我们需要用蓝色来代表饼图的比例，《CSS Secret》给出的思路是覆盖一层与背景同色的伪元素上去，使其旋转露出比例的部分，那么首先，需要将圆形另一半的背景色置为蓝色，可以通过线性渐变来实现：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-tag">transparent</span> 50%, <span class="selector-id">#3195d0</span> 0);</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<p><img src="https://itwanggj.github.io/images/circle-step-2.png" alt=""></p>
<p>然后，我们通过伪元素::before添加一层遮罩，使其遮挡住右半部分：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.pie::before &#123;</div><div class="line">    content: '';</div><div class="line">    display: block;</div><div class="line">    margin-left: 50%;</div><div class="line">    height: 100%;</div><div class="line">    background-color: inherit;</div><div class="line">    border-radius: 0 100% 100% 0 / 50%;    </div><div class="line">｝</div></pre></td></tr></table></figure></p>
<p>伪元素的宽度为圆的一半，并位于右边遮挡住右半部分，当然，仅仅是这样还不够，这里的关键是设置border-radius使其呈现半圆形，border-radius通过/分隔四个角的水平半径和垂直半径。<br>这时候，我们通过transform可以使伪元素发生旋转，露出想要的比例：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform-origin</span>: <span class="selector-tag">left</span>;</div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(<span class="selector-class">.1turn</span>);</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<p><img src="https://itwanggj.github.io/images/circle-step-3.png" alt=""></p>
<p>已经离我们想要的越来越接近了，为了让饼图可以动起来，我们可以通过CSS3的animation来实现<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> spin &#123;</div><div class="line">    <span class="selector-tag">to</span> &#123;</div><div class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(.5turn);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">keyframes</span> bg &#123;</div><div class="line">    50% &#123;</div><div class="line">        <span class="attribute">background</span>: <span class="number">#3195d0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.pie</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">background-color</span>: inherit;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">100%</span> <span class="number">100%</span> <span class="number">0</span> / <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform-origin</span>: left;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(.1turn);</div><div class="line">    <span class="attribute">animation</span>: spin <span class="number">10s</span> linear infinite,</div><div class="line">               bg <span class="number">20s</span> step-end infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意，@keyframes bg的作用是当饼图旋转到一半时应该更换背景颜色，才能达到我们想要的效果，最后，我们再通过::after添加一层伪元素，使圆环看上去有空心的效果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.pie</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">height</span>: <span class="number">80%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">10%</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">10%</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后的效果如下：</p>
<p><img src="https://itwanggj.github.io/images/circle-step-4.png" alt=""></p>
<p>如此就实现了一个简单的圆环，当然，你可以配合JS来添加一些交互，在这里安利一波《CSS Secret》，充满着CSS3黑科技的好书，据说中文版目前还没有人在翻译。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS3的提出使得CSS不再是单纯的样式表，只要运用得到，就可以实现一些我们很棒的动画效果，最近项目有需求需要实现一个环形进度条，一开始没有思路，在看了《CSS Secret》之后觉得有受启发，便记录下这个过程。在过去，实现一个这样的进度条难免要拼接大量图片，CSS3和HTML5的出现使得这个过程变得简单无比。&lt;br&gt;首先，我们需要一个元素来承载我们的样式：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;pie&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;事实上，如果要实现环形图，只要实现饼图，然后在其上覆盖一层遮罩即可，所以我们可以先从如何实现饼图开始：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.pie&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width &lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height &lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ddd&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; auto;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们首先通过.pie实现了一个圆形，并将其居中方便我们进行观察，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://itwanggj.github.io/images/circle-step-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据可视化" scheme="https://itwanggj.github.io/categories/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="D3" scheme="https://itwanggj.github.io/categories/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/D3/"/>
    
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="https://itwanggj.github.io/tags/CSS3/"/>
    
      <category term="html" scheme="https://itwanggj.github.io/tags/html/"/>
    
      <category term="D3" scheme="https://itwanggj.github.io/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>说说Javascript函数(转)</title>
    <link href="https://itwanggj.github.io/2017/02/01/%E8%AF%B4%E8%AF%B4Javascript%E5%87%BD%E6%95%B0/"/>
    <id>https://itwanggj.github.io/2017/02/01/说说Javascript函数/</id>
    <published>2017-02-01T01:09:10.000Z</published>
    <updated>2017-03-01T14:57:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信凡是接触过编程的人对函数这个概念必然不会陌生，几乎所有的编程语言都会引入函数这个概念，而函数的实质就是封装一丢执行流程的组合，方便我们在各处进行调用，在面向对象没有出现之前，函数式编程曾经是主流的编程模式。</p>
<p>由于需要在团队做一个有关Javascript函数的分享，顺便就整理了一些内容记录下来。Javascript的函数是我们在coding时不可避免的工具，然而我们很少会去追本溯源地挖掘函数究竟是什么？事实上，就好像一个组装好的玩具，如果不将其拆开，似乎也能玩得得心应手，但却总觉得少了些什么，不如拆拆看，说不定会有有趣的发现。</p>
<h1 id="一、Javascript函数到底是什么？"><a href="#一、Javascript函数到底是什么？" class="headerlink" title="一、Javascript函数到底是什么？"></a>一、Javascript函数到底是什么？</h1><p>关于Javascript函数到底是什么，《Javascript高级程序设计》给出了定义————函数是对象，函数名是指针。是的，函数是对象，但它似乎与我们平常所见的Javascript对象有着诸多不同，比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> foo); <span class="comment">//'function'</span></div></pre></td></tr></table></figure></p>
<p>对函数使用typeof，会单独打印出function，除此以外，函数还有诸多奇怪之处。但不管怎么样，这并不影响函数是对象的事实，我们知道，Javascript的所有对象都存在一个构造器，而函数的构造器就是Function，观察如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"num1"</span>, <span class="string">"num2"</span>, <span class="string">"return num1 + num2"</span>);</div><div class="line"><span class="built_in">console</span>.log(foo(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">//'3'</span></div></pre></td></tr></table></figure></p>
<p>使用new + 构造函数的方式创建对象，这和我们平常所见到的创建对象的方式并没有什么两样，事实上，尽管我们并不推荐使用这种方法创建函数，但不论是用函数声明还是函数表达式都必然会经过这个过程，这对于我们理解函数是对象，函数名是指针有着重要意义。<br><a id="more"></a></p>
<h1 id="二、Javascript函数里有什么？"><a href="#二、Javascript函数里有什么？" class="headerlink" title="二、Javascript函数里有什么？"></a>二、Javascript函数里有什么？</h1><p>那么，既然知道了函数是对象，我们就会想是否可以用研究对象的方式去研究函数。Javascript的对象是属性和方法的集合，函数是对象，那函数必然也会拥有自身的属性与方法。一般来说，要查看一个对象有哪些属性与方法，通过console.log()打印在chrome控制台上似乎是不错的选择：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// ?</span></div></pre></td></tr></table></figure></p>
<p>然而，事实真的是这样么？似乎不是，通过console.log()打印出来的是一串文本，而文本的内容正是我们所写的函数代码。<br>为什么会这样呢？<br>这是函数的一个特殊性，console.log在打印是，会判断参数是否是function类型，如果是，就会调用其toString方法将其转换为字符串进行打印。为了证明这一点，我们可以尝试重写toString方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line">foo.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'string'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 'function string'</span></div></pre></td></tr></table></figure></p>
<p>那么，使用console.log观察的方法似乎不可行了，这时候，我们换种思路，想想Javascript是否提供遍历属性的方法？答案是肯定的，我们想到了in:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> foo) &#123;</div><div class="line">    <span class="built_in">console</span>.log(attr);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然而，结果也不尽人意，什么都没有打印出来，为什么呢？<br>Javascript的所有对象属性都存在一些特性，其中有一项决定这个属性是否可枚举，我们可以通过Object的一个方法来监测函数的一项属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.propertyIsEnumerable(f.length)); <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>由此可以推断，函数的所有属性应该都是不可枚举的，那么问题来了，我们该如何研究函数的属性呢？</p>
<p>事实上，console.log虽然会对传入的函数调用toString方法，但如果传入的是普通对象，那它的结果就一目了然了，所以我们可以将函数作为某个对象的方法，通过打印这个对象进行观察：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(foo.prototype);  <span class="comment">//观察constructor</span></div></pre></td></tr></table></figure></p>
<p>我们知道，所有的函数都存在prototype属性，而prototype对象的constructor属性在没做过任何更改的情况下默认指向的就是函数本身。通过打印foo.prototype,我们可以清楚地看到函数的结构。</p>
<p>函数自身包含四个属性：arguments,caller,length,name。</p>
<p>先说说arguments,arguments存储的是函数的参数，它提供一个类数组的结构，并且只有在运行时生成：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(foo.arguments[<span class="number">0</span>]); <span class="comment">// 1</span></div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">1</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure></p>
<p>可以看出，arguments似乎和数组非常相似，那么，它真的是数组么？可以通过instanceof来检查看看：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(foo.arguments <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>答案是否定的，虽然arguments在结构上和数组一样，但它并不是由Array构造器生成，所以也不具备数组对象的任何方法，然而，在一般的使用过程中，我们可以将其转换成数组：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div></pre></td></tr></table></figure></p>
<p>通过对arguments调用数组的slice方法，可以返回一个新的数组对象，这个数组对象包含arguments的所有成员，并具备数组的所有方法和特性。</p>
<p>arguments还有一个有趣的地方，就是它的自动更新：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(foo.arguments[<span class="number">0</span>]); <span class="comment">// 1</span></div><div class="line">    num1 = <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(foo.arguments[<span class="number">0</span>]); <span class="comment">// 2</span></div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">1</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure></p>
<p>对num1的修改会影响到arguments[0]的值，反过来，修改arguments[0]的值同样也会影响到num1，可以看出它们是互相绑定的。令人诧异的是，这种自动更新在严格模式下却不会生效：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">‘use strict’;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(foo.arguments[<span class="number">0</span>]); <span class="comment">// 1</span></div><div class="line">    num1 = <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(foo.arguments[<span class="number">0</span>]); <span class="comment">// 1</span></div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">1</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure></p>
<p>严格模式下的arguments不会创建自身的get与set,这也是值得我们注意的一点。</p>
<p>再来看看caller，caller是我们平常比较少见的一个属性，事实上，它仅仅是对父函数的一个引用，可以看下如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(foo.caller); <span class="comment">//father函数的字符串形式</span></div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    foo(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">father();</div></pre></td></tr></table></figure></p>
<p>值得注意的是，如果是在全局环境下调用的函数，其caller为null：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(foo.caller); <span class="comment">//null</span></div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">1</span>, <span class="number">2</span>);</div></pre></td></tr></table></figure></p>
<p>另外，caller和arguments一样，也是在运行时生成的，在函数没有运行的情况下都为null。</p>
<p>然后，我们来看看name属性，其实故名思义，name属性保存的就是函数的名字，事实上，我们在用函数声明定义函数的时候：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一方面，Javascript创建了一个函数对象，并将foo赋予该对象的name属性，另一方面，生成了一个名为foo的变量，并将其指向该函数。</p>
<p>而且，Javascript可以创建匿名函数，匿名函数的name值就是””。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;.name); <span class="comment">// ""</span></div></pre></td></tr></table></figure></p>
<p>最后来讲讲length,length保存的是Javascript函数的参数数量，和arguments.length不同的是，这里的参数数量由定义的时候决定的，不会随着参数的增加而增加，通过下面这段代码可以感受一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(foo.arguments.length); <span class="comment">// 3</span></div><div class="line">    <span class="built_in">console</span>.log(foo.length); <span class="comment">// 2</span></div><div class="line">    <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure></p>
<p>除了这些属性之外，函数对象的proto还提供一些方法，我们知道，对象的proto指向的是其构造器的prototype属性，也就是说，这些方法都定义在Function.prototype中。</p>
<p>比较常用的是call和apply，这两个方法主要负责绑定函数运行时的this对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="string">'a'</span> : <span class="number">1</span>,</div><div class="line">    <span class="string">'b'</span> : <span class="number">2</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.a = num1;</div><div class="line">    <span class="keyword">this</span>.b = num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo.call(obj, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;'a': 2, 'b': 3&#125;</span></div><div class="line">foo.apply(obj, [<span class="number">4</span>, <span class="number">5</span>]);</div><div class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;'a': 4, 'b': 5&#125;</span></div></pre></td></tr></table></figure></p>
<p>call和apply的主要区别就是传参的方式有所不同，apply是将参数作为数组的形式传入，而call则是将参数逐个传入。</p>
<p>除了call和apply外，ECMAScript 5提供的bind也可以改变函数的this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="string">'a'</span> : <span class="number">1</span>,</div><div class="line">    <span class="string">'b'</span> : <span class="number">2</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.a = num1;</div><div class="line">    <span class="keyword">this</span>.b = num2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> goo = foo.bind(obj);</div><div class="line"></div><div class="line">goo(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;'a': 2, 'b': 3&#125;</span></div></pre></td></tr></table></figure></p>
<p>另外之前提过，函数还带有toString方法可以返回函数的代码，这里就不在赘述。</p>
<p>本文主要通过解剖的方式分析了Javascript函数对象的种种，当然，对函数的研究还远不止于此，接下来我会在其他文章中逐一描述。<br>说明：原文转载于<a href="https://lightechen.github.io" target="_blank" rel="external">https://lightechen.github.io</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信凡是接触过编程的人对函数这个概念必然不会陌生，几乎所有的编程语言都会引入函数这个概念，而函数的实质就是封装一丢执行流程的组合，方便我们在各处进行调用，在面向对象没有出现之前，函数式编程曾经是主流的编程模式。&lt;/p&gt;
&lt;p&gt;由于需要在团队做一个有关Javascript函数的分享，顺便就整理了一些内容记录下来。Javascript的函数是我们在coding时不可避免的工具，然而我们很少会去追本溯源地挖掘函数究竟是什么？事实上，就好像一个组装好的玩具，如果不将其拆开，似乎也能玩得得心应手，但却总觉得少了些什么，不如拆拆看，说不定会有有趣的发现。&lt;/p&gt;
&lt;h1 id=&quot;一、Javascript函数到底是什么？&quot;&gt;&lt;a href=&quot;#一、Javascript函数到底是什么？&quot; class=&quot;headerlink&quot; title=&quot;一、Javascript函数到底是什么？&quot;&gt;&lt;/a&gt;一、Javascript函数到底是什么？&lt;/h1&gt;&lt;p&gt;关于Javascript函数到底是什么，《Javascript高级程序设计》给出了定义————函数是对象，函数名是指针。是的，函数是对象，但它似乎与我们平常所见的Javascript对象有着诸多不同，比如：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num1, num2&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num1 + num2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; foo); &lt;span class=&quot;comment&quot;&gt;//&#39;function&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对函数使用typeof，会单独打印出function，除此以外，函数还有诸多奇怪之处。但不管怎么样，这并不影响函数是对象的事实，我们知道，Javascript的所有对象都存在一个构造器，而函数的构造器就是Function，观察如下代码：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;num1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;num2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;return num1 + num2&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(foo(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;//&#39;3&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用new + 构造函数的方式创建对象，这和我们平常所见到的创建对象的方式并没有什么两样，事实上，尽管我们并不推荐使用这种方法创建函数，但不论是用函数声明还是函数表达式都必然会经过这个过程，这对于我们理解函数是对象，函数名是指针有着重要意义。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/categories/JavaScript/"/>
    
      <category term="函数" scheme="https://itwanggj.github.io/categories/JavaScript/%E5%87%BD%E6%95%B0/"/>
    
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/tags/JavaScript/"/>
    
      <category term="CSS3" scheme="https://itwanggj.github.io/tags/CSS3/"/>
    
      <category term="html" scheme="https://itwanggj.github.io/tags/html/"/>
    
      <category term="HTML5" scheme="https://itwanggj.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>wordpress显示头像</title>
    <link href="https://itwanggj.github.io/2017/01/12/wordpress%E6%98%BE%E7%A4%BA%E5%A4%B4%E5%83%8F/"/>
    <id>https://itwanggj.github.io/2017/01/12/wordpress显示头像/</id>
    <published>2017-01-12T11:12:34.000Z</published>
    <updated>2017-03-01T15:04:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>安装插件，搜索avatar，选择WP User Avatar，点击现在安装<br><img src="https://itwanggj.github.io/images/search-plugins.png" alt=""></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="调用ssl-头像链接"><a href="#调用ssl-头像链接" class="headerlink" title="调用ssl 头像链接"></a>调用ssl 头像链接</h3><p>https还是没被墙的，而且速度还不错，直接调用这个最简单了。<br>如果你的网站启用了ssl则不需要了，否则functions.php 加入如下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ssl_avatar</span>(<span class="params">$avatar</span>) </span>&#123;</div><div class="line">  $avatar = preg_replace(<span class="string">'/.*\/avatar\/(.*)\?s=([\d]+)&amp;.*/'</span>,<span class="string">'&lt;img src="https://secure.gravatar.com/avatar/$1?s=$2" class="avatar avatar-$2" height="$2" width="$2"&gt;'</span>,$avatar);</div><div class="line">  <span class="keyword">return</span> $avatar;</div><div class="line">&#125;</div><div class="line">add_filter(<span class="string">'get_avatar'</span>, <span class="string">'get_ssl_avatar'</span>);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>优点：简单稳定</p>
<p>缺点: 当头像特别大时速度可能略慢</p>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><h3 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h3><p>下面的代码加到functions.php中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_avatar</span>(<span class="params">$avatar</span>) </span>&#123;</div><div class="line">  $tmp = strpos($avatar, <span class="string">'http'</span>);</div><div class="line">  $g = substr($avatar, $tmp, strpos($avatar, <span class="string">"'"</span>, $tmp) - $tmp);</div><div class="line">  $tmp = strpos($g, <span class="string">'avatar/'</span>) + <span class="number">7</span>;</div><div class="line">  $f = substr($g, $tmp, strpos($g, <span class="string">"?"</span>, $tmp) - $tmp);</div><div class="line">  $w = get_bloginfo(<span class="string">'wpurl'</span>);</div><div class="line">  $e = ABSPATH .<span class="string">'avatar/'</span>. $f .<span class="string">'.jpg'</span>;</div><div class="line">  $t = <span class="number">1209600</span>; <span class="comment">//設定14天, 單位:秒</span></div><div class="line">  <span class="keyword">if</span> ( !is_file($e) || (time() - filemtime($e)) &gt; $t ) &#123; <span class="comment">//當頭像不存在或文件超過14天才更新</span></div><div class="line">    copy(htmlspecialchars_decode($g), $e);</div><div class="line">  &#125; <span class="keyword">else</span>  $avatar = strtr($avatar, array(<span class="function"><span class="params">$g</span> =&gt;</span> $w.<span class="string">'/avatar/'</span>.$f.<span class="string">'.jpg'</span>));</div><div class="line">  <span class="keyword">if</span> (filesize($e) &lt; <span class="number">500</span>) copy($w.<span class="string">'/avatar/default.jpg'</span>, $e);</div><div class="line">  <span class="keyword">return</span> $avatar;</div><div class="line">&#125;</div><div class="line">add_filter(<span class="string">'get_avatar'</span>, <span class="string">'my_avatar'</span>);</div></pre></td></tr></table></figure></p>
<p>在WordPress安装根目（即跟wp-content等文件夹同一目录下）下新建一个名为 avatar 的文件夹 ，并给予写权限。放入一张同尺寸的头像图片命名为default.jpg。</p>
<p>优点:和主机速度挂钩，如果你的服务器特别快则头像加载也特别快</p>
<p>缺点:只能缓存一个尺寸的头像，国内主机无法使用</p>
<h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><p>七牛缓存</p>
<p>请度娘或Google.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;p&gt;安装插件，搜索avatar，选择WP User Avatar，点击现在安装&lt;br&gt;&lt;img src=&quot;https://itwanggj.github.io/images/search-plugins.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法二&quot;&gt;&lt;a href=&quot;#方法二&quot; class=&quot;headerlink&quot; title=&quot;方法二&quot;&gt;&lt;/a&gt;方法二&lt;/h2&gt;&lt;h3 id=&quot;调用ssl-头像链接&quot;&gt;&lt;a href=&quot;#调用ssl-头像链接&quot; class=&quot;headerlink&quot; title=&quot;调用ssl 头像链接&quot;&gt;&lt;/a&gt;调用ssl 头像链接&lt;/h3&gt;&lt;p&gt;https还是没被墙的，而且速度还不错，直接调用这个最简单了。&lt;br&gt;如果你的网站启用了ssl则不需要了，否则functions.php 加入如下代码&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_ssl_avatar&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;$avatar&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  $avatar = preg_replace(&lt;span class=&quot;string&quot;&gt;&#39;/.*\/avatar\/(.*)\?s=([\d]+)&amp;amp;.*/&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;img src=&quot;https://secure.gravatar.com/avatar/$1?s=$2&quot; class=&quot;avatar avatar-$2&quot; height=&quot;$2&quot; width=&quot;$2&quot;&amp;gt;&#39;&lt;/span&gt;,$avatar);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $avatar;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;add_filter(&lt;span class=&quot;string&quot;&gt;&#39;get_avatar&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;get_ssl_avatar&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="wordpress" scheme="https://itwanggj.github.io/categories/wordpress/"/>
    
      <category term="javascript" scheme="https://itwanggj.github.io/categories/wordpress/javascript/"/>
    
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/tags/JavaScript/"/>
    
      <category term="CSS" scheme="https://itwanggj.github.io/tags/CSS/"/>
    
      <category term="Html" scheme="https://itwanggj.github.io/tags/Html/"/>
    
      <category term="wordpress" scheme="https://itwanggj.github.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>wordpress发送邮件</title>
    <link href="https://itwanggj.github.io/2017/01/04/wordpress%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>https://itwanggj.github.io/2017/01/04/wordpress发送邮件/</id>
    <published>2017-01-04T03:11:34.000Z</published>
    <updated>2017-03-01T15:04:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装插件搜索WP SMTP，从搜索结果中选择Easy WP SMTP点击现在安装，如下图：<br><img src="https://itwanggj.github.io/images/search-plugins.png" alt=""><br>配置邮件服务信息<br><img src="https://itwanggj.github.io/images/settings.png" alt=""><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装插件搜索WP SMTP，从搜索结果中选择Easy WP SMTP点击现在安装，如下图：&lt;br&gt;&lt;img src=&quot;https://itwanggj.github.io/images/search-plugins.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;配置邮件服务信息&lt;br&gt;&lt;img src=&quot;https://itwanggj.github.io/images/settings.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="wordpress" scheme="https://itwanggj.github.io/categories/wordpress/"/>
    
      <category term="javascript" scheme="https://itwanggj.github.io/categories/wordpress/javascript/"/>
    
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/tags/JavaScript/"/>
    
      <category term="CSS" scheme="https://itwanggj.github.io/tags/CSS/"/>
    
      <category term="Html" scheme="https://itwanggj.github.io/tags/Html/"/>
    
      <category term="wordpress" scheme="https://itwanggj.github.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>如何配置Apache服务器（MAC版）</title>
    <link href="https://itwanggj.github.io/2016/12/09/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEApache%E6%9C%8D%E5%8A%A1%E5%99%A8(Mac%E7%89%88)/"/>
    <id>https://itwanggj.github.io/2016/12/09/如何配置Apache服务器(Mac版)/</id>
    <published>2016-12-09T03:12:34.000Z</published>
    <updated>2017-02-28T14:20:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候，我们需要在内网工作组中分享一些文件或是后台接口没有及时给出，你又想要模拟真实数据，直接在项目里创建plist也可以做到这种需求，但难免让工程变得冗余且看起来比较Low。这个时候就看出配置本地服务器的重要性了，不用时刻等着后台接口的更新，只需要根据接口文档自己模拟真实数据，即方便又显得高大上。</p>
<p>Mac自带了Apache环境，我们要做的只是稍微配置一下</p>
<p>环境：Mac OS X 10.12</p>
<h2 id="启动Apache"><a href="#启动Apache" class="headerlink" title="启动Apache"></a>启动Apache</h2><p>在终端输入：sudo apachectl start，这样就将Mac自带的Apache启动了，在浏览器输入“<a href="http://localhost”，会显示“It" target="_blank" rel="external">http://localhost”，会显示“It</a> works!”，说明服务器已经启动成功了。Apache默认的根目录在“/Library/WebServer/Documents/”下。</p>
<h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><p>在Finder中创建一个”Sites”的文件夹，直接创建在/Users/wan(当前用户名)目录下，如图：<br><img src="https://itwanggj.github.io/images/aaa.png" alt=""></p>
<ul>
<li>切换工作目录下：cd /etc/apache2</li>
<li>备份文件，只需要执行一次：sudo cp httpd.conf httpd.conf.bak</li>
<li>如果操作出现错误！可以使用命令，恢复备份的 httpd.conf 文件：sudo cp httpd.conf.bak httpd.conf</li>
<li><p>用vim编辑httpd.conf文件，httpd.conf文件时Apache的配置文件：sudo vim httpd.conf</p>
<a id="more"></a>
<p>这时候需要输入密码来获取权限，出现如下界面：<br><img src="https://itwanggj.github.io/images/bbb.png" alt=""><br>回车进入到下面的界面：<br><img src="https://itwanggj.github.io/images/ccc.png" alt=""></p>
</li>
<li><p>按住shift键，并且输入“ ：”号进入vim命令模式，搜索/DocumentRoot，找到图中对应位置将圈内路径改为之前创建的Sites文件夹的路径。</p>
</li>
</ul>
<p><img src="https://itwanggj.github.io/images/ddd.png" alt=""></p>
<ul>
<li>之后找到Options FollowSymLinks：修改为Options Indexes FollowSymLinks，在两个单词间添加一个Indexes单词</li>
<li>接下来查找php，:/php，定位到图中位置：</li>
</ul>
<p><img src="https://itwanggj.github.io/images/eee.png" alt=""></p>
<ul>
<li>将这句代码前面的＃去掉。最后:wq保存并退出</li>
<li>切换工作目录：cd /etc</li>
<li>拷贝php.ini文件：sudo cp php.ini.default php.ini</li>
</ul>
<h2 id="重新启动apache服务器"><a href="#重新启动apache服务器" class="headerlink" title="重新启动apache服务器"></a>重新启动apache服务器</h2><p>在终端输入：sudo apachectl -k restart</p>
<p>这个时候如果在浏览器地址输入<a href="http://127.0.0.1/" target="_blank" rel="external">http://127.0.0.1/</a>，就会将Sites文件夹中的目录列出来了。同一工作组里的电脑可以通过本电脑的ip地址来访问本电脑上的文件。<br><img src="https://itwanggj.github.io/images/fff.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的时候，我们需要在内网工作组中分享一些文件或是后台接口没有及时给出，你又想要模拟真实数据，直接在项目里创建plist也可以做到这种需求，但难免让工程变得冗余且看起来比较Low。这个时候就看出配置本地服务器的重要性了，不用时刻等着后台接口的更新，只需要根据接口文档自己模拟真实数据，即方便又显得高大上。&lt;/p&gt;
&lt;p&gt;Mac自带了Apache环境，我们要做的只是稍微配置一下&lt;/p&gt;
&lt;p&gt;环境：Mac OS X 10.12&lt;/p&gt;
&lt;h2 id=&quot;启动Apache&quot;&gt;&lt;a href=&quot;#启动Apache&quot; class=&quot;headerlink&quot; title=&quot;启动Apache&quot;&gt;&lt;/a&gt;启动Apache&lt;/h2&gt;&lt;p&gt;在终端输入：sudo apachectl start，这样就将Mac自带的Apache启动了，在浏览器输入“&lt;a href=&quot;http://localhost”，会显示“It&quot;&gt;http://localhost”，会显示“It&lt;/a&gt; works!”，说明服务器已经启动成功了。Apache默认的根目录在“/Library/WebServer/Documents/”下。&lt;/p&gt;
&lt;h2 id=&quot;配置服务器&quot;&gt;&lt;a href=&quot;#配置服务器&quot; class=&quot;headerlink&quot; title=&quot;配置服务器&quot;&gt;&lt;/a&gt;配置服务器&lt;/h2&gt;&lt;p&gt;在Finder中创建一个”Sites”的文件夹，直接创建在/Users/wan(当前用户名)目录下，如图：&lt;br&gt;&lt;img src=&quot;https://itwanggj.github.io/images/aaa.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切换工作目录下：cd /etc/apache2&lt;/li&gt;
&lt;li&gt;备份文件，只需要执行一次：sudo cp httpd.conf httpd.conf.bak&lt;/li&gt;
&lt;li&gt;如果操作出现错误！可以使用命令，恢复备份的 httpd.conf 文件：sudo cp httpd.conf.bak httpd.conf&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用vim编辑httpd.conf文件，httpd.conf文件时Apache的配置文件：sudo vim httpd.conf&lt;/p&gt;
    
    </summary>
    
      <category term="配置服务器" scheme="https://itwanggj.github.io/categories/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="APACHE" scheme="https://itwanggj.github.io/categories/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/APACHE/"/>
    
      <category term="MAC版" scheme="https://itwanggj.github.io/categories/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/APACHE/MAC%E7%89%88/"/>
    
    
      <category term="Apache" scheme="https://itwanggj.github.io/tags/Apache/"/>
    
      <category term="服务器" scheme="https://itwanggj.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="D3" scheme="https://itwanggj.github.io/tags/D3/"/>
    
      <category term="数据可视化" scheme="https://itwanggj.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>深入理解vertical-align总结</title>
    <link href="https://itwanggj.github.io/2016/11/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3vertical-align%E6%80%BB%E7%BB%93/"/>
    <id>https://itwanggj.github.io/2016/11/21/深入理解vertical-align总结/</id>
    <published>2016-11-21T01:12:34.000Z</published>
    <updated>2017-03-01T13:59:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了慕课网关于vertical-align的视频讲解，感觉讲的挺深，所以总结了一下<br>vertical-align的百分比值相对于line-height计算<br>IE6/7下line-height不支持小数</p>
<h2 id="vertical-align起作用的前提"><a href="#vertical-align起作用的前提" class="headerlink" title="vertical-align起作用的前提"></a>vertical-align起作用的前提</h2><p>该属性应用于inline水平或者table-cell元素</p>
<h3 id="inline水平"><a href="#inline水平" class="headerlink" title="inline水平"></a>inline水平</h3><p>inline:img,span,strong,em等<br>inline-block:input,button（ie8+，ie6/7会把inline-block当作inline）</p>
<h3 id="table-cell元素"><a href="#table-cell元素" class="headerlink" title="table-cell元素"></a>table-cell元素</h3><p>td<br>所以默认情况下支持vertical-align的有：图片，按钮，文字，单元格</p>
<h3 id="抛出一个问题"><a href="#抛出一个问题" class="headerlink" title="抛出一个问题"></a>抛出一个问题</h3><p>想实现图片的垂直居中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.insgeek.com/public/insgeek2.0/img/indexpec/enleft.jpg"</span> <span class="attr">width</span>=<span class="string">'100'</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">  <span class="attribute">vertical-align</span>:middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>利用vertical-align：middle实现垂直居中，但是这里并没有按照我们想要的去做，解决办法：</p>
<h3 id="1-给父元素添加line-height的值为高度（ie7-都可以实现）"><a href="#1-给父元素添加line-height的值为高度（ie7-都可以实现）" class="headerlink" title="1.给父元素添加line-height的值为高度（ie7+都可以实现）"></a>1.给父元素添加line-height的值为高度（ie7+都可以实现）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">line-height</span>:<span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-给父元素添加display-table-cell"><a href="#2-给父元素添加display-table-cell" class="headerlink" title="2.给父元素添加display:table-cell"></a>2.给父元素添加display:table-cell</h3><p>table-cell元素的vertical-align只会作用于自身，里面的子元素设置不起作用<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">display</span>:table-cell;</div><div class="line">    <span class="comment">/*把img的去掉*/</span></div><div class="line">     <span class="attribute">vertical-align</span>:middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="vertical-align与line-height"><a href="#vertical-align与line-height" class="headerlink" title="vertical-align与line-height"></a>vertical-align与line-height</h3><p>利用text-align:justify任意数目列表两端对齐效果<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.justify-fix</span>&#123;<span class="attribute">display</span>:inline-block;<span class="attribute">width</span>:<span class="number">250px</span>&#125;</div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#666</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align: justify"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/mm1.jpg"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/mm1.jpg"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/mm1.jpg"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/mm1.jpg"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"justify-fix"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"justify-fix"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"justify-fix"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://itwanggj.github.io/images/3.png" alt=""><br>运行后红色虚线表示i标签的位置<br>设置容器，p的行高为0<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p&#123;</div><div class="line">    line-height:0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>则出现如下情况：<br><img src="https://itwanggj.github.io/images/4.png" alt=""></p>
<h3 id="为什么会出现这样的现象？"><a href="#为什么会出现这样的现象？" class="headerlink" title="为什么会出现这样的现象？"></a>为什么会出现这样的现象？</h3><p>首先看一个东西<br>从CSS2的可视化格式模型文档中看到：<br>‘inline-block’的基线是正常流中最后一个line box的基线，除非，这个line box里面既没有line boxes或者本身‘overflow’属性的计算值而不是‘visible’，这种情况下基线是margin第边缘<br>举例说明：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">	<span class="selector-class">.dib-baseline</span>&#123;</div><div class="line">		<span class="attribute">display</span>: inline-block;</div><div class="line">		<span class="attribute">width</span>: <span class="number">150px</span>;</div><div class="line">		<span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#cad5eb</span>;</div><div class="line">		<span class="attribute">background-color</span>: <span class="number">#f0f3f9</span>;</div><div class="line">		<span class="attribute">margin-top</span>: <span class="number">20px</span>;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dib-baseline"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dib-baseline"</span>&gt;</span>dib-baseline<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="https://itwanggj.github.io/images/5.png" alt=""><br>文档解释了该现象，因为前面的盒子没有任何字符，此时它的基线就是它的底边缘，后面的盒子有文字，所以该盒子的基线就是文字的基线，二者基线对齐，现成如此效果。<br>如果把第二个盒子line-height:0，此时文字基线的位置，就是文字的垂直中心，所以：<br><img src="https://itwanggj.github.io/images/6.png" alt=""><br>所以，以上情况下面那些空白，是由于本身后面两个图片是没有的，所以可以当作是空白字符（空格），即后面两个<i>是有字符的，而第一个<i>是没有字符的，所以和上面的那个例子一样，默认基线对齐，所以，会导致出现小的空隙（其本质和图2一样），要消除这个空隙，需要给i都添加空白字符（ 或者直接改变对齐方式，vertical-align：top / bottom）即可，而这个line-height：0可以不添加。</i></i></p>
<p>要消除需要给p标签（容器）设置：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">line-height</span>:<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.justify-fix</span>&#123;</div><div class="line">    <span class="attribute">vertical-align</span>: bottom / top;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后运行结果：<br><img src="https://itwanggj.github.io/images/7.png" alt=""></p>
<h2 id="vertical-align线性属性值"><a href="#vertical-align线性属性值" class="headerlink" title="vertical-align线性属性值"></a>vertical-align线性属性值</h2><h3 id="1-vertical-align-bottom（top与之差不多）"><a href="#1-vertical-align-bottom（top与之差不多）" class="headerlink" title="1.vertical-align:bottom（top与之差不多）"></a>1.vertical-align:bottom（top与之差不多）</h3><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol>
<li>inline / inline-block元素：元素底部和整行底部对齐。</li>
<li>table-cell元素：单元格底padding边缘和表格行的底部对齐。</li>
</ol>
<h3 id="2-vertical-align-middle"><a href="#2-vertical-align-middle" class="headerlink" title="2.vertical-align:middle"></a>2.vertical-align:middle</h3><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ol>
<li>inline / inline-block元素：元素的垂直中心点和父元素基线上1/2 x-height处对齐。</li>
<li>table - cell元素：单元格填充盒子相对于外卖的表格行居中对齐。</li>
</ol>
<h3 id="利用vertical-align：middle所实现的是近似垂直居中"><a href="#利用vertical-align：middle所实现的是近似垂直居中" class="headerlink" title="利用vertical-align：middle所实现的是近似垂直居中"></a>利用vertical-align：middle所实现的是近似垂直居中</h3><p>为什么是近似呢？答案就在于： inline / inline-block元素：元素的垂直中心点和父元素基线上1/2 x-height处对齐<br>父元素基线上1/2 x-height处其实就是用line-height撑开后字符水平中心<br>字符所在的水平中心线和经过line-height撑开后的水平中心线（vertical-algin：middle的水平中心线）不是一个中心线,具体演示看 <a href="http://www.imooc.com/video/10403" target="_blank" rel="external">vertical-align线性属性值</a>因为字符，本身有个下沉的特性</p>
<h3 id="那么如何实现完全垂直居中？"><a href="#那么如何实现完全垂直居中？" class="headerlink" title="那么如何实现完全垂直居中？"></a>那么如何实现完全垂直居中？</h3><p>给父元素设置<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>:<span class="number">0</span>&#125;</div></pre></td></tr></table></figure></p>
<p>这样元素的垂直中心点和父元素基线上1/2 x-height处就完全重合了<br>但是这样会出现问题，如果我们在父级元素中有文字，那么设置font-size：0会导致文字无法显示，实现完全垂直居中的另一种方法是给图片（img）后面添加一个span,span设置为vertical-align：middle。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">line-height</span>:<span class="number">250px</span>; &#125;</div><div class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">veritcal-align</span>:middle; &#125;</div><div class="line"><span class="selector-tag">img</span>+<span class="selector-tag">span</span> &#123; <span class="attribute">veritcal-align</span>:middle; &#125;</div></pre></td></tr></table></figure></p>
<h3 id="vertical-align文本类属性值"><a href="#vertical-align文本类属性值" class="headerlink" title="vertical-align文本类属性值"></a>vertical-align文本类属性值</h3><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><ol>
<li>vertical-align :text-top<br> 盒子的顶部和父级content area的顶部对齐</li>
<li>vertical-align：text-bottom</li>
</ol>
<p>盒子的底部和父级content area的底部对齐</p>
<h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><p>content area就是只与父级font-size的大小有关，与行高，以及后面是否有inline-block元素的没有任何关系，但是vertical-align：middle / top / bottom都会被后面的inline-block水平元素影响。</p>
<h3 id="用处："><a href="#用处：" class="headerlink" title="用处："></a>用处：</h3><p>一般用于表情图片（或原始尺寸背景图标）与文字的对齐效果</p>
<h3 id="输入理解vertical-align上标下标类—sub-super"><a href="#输入理解vertical-align上标下标类—sub-super" class="headerlink" title="输入理解vertical-align上标下标类—sub / super"></a>输入理解vertical-align上标下标类—sub / super</h3><p>HTML中有原生的上下标标签，分别为：<sup> ,<sub>。利用原生的HTML获得的上下标文字大小是父元素75%左右。</sub></sup></p>
<h3 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h3><ol>
<li>vertical-align：super<br> 提高盒子的基线到父级合适的上标基线位置。</li>
<li>vertical-align：sub<br> 降低盒子的基线到父级合适的下标基线位置。<h4 id="vertical-align前后不一的作用机制与示例"><a href="#vertical-align前后不一的作用机制与示例" class="headerlink" title="vertical-align前后不一的作用机制与示例"></a>vertical-align前后不一的作用机制与示例</h4>vertical-align所有的表现只当前元素和父级有关，前后并没有直接影响</li>
<li>实现小图标和文字的对齐<br> 使用vertical-align负值，虽然图片文字对齐可以使用浮动实现的，但是尽量少用浮动，因为会破坏布局，使用vertical-align负值可以实现居中;</li>
<li>不定尺寸图片或多行文字的垂直居中,具体实现步骤如下：<ul>
<li>大小不固定的图片垂直居中</li>
<li>主体元素inline-block化；</li>
<li>0宽度100%高度辅助元素；</li>
<li>vertical-align:middle；</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"30%"</span> <span class="attr">src</span>=<span class="string">"./111.jpg"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">     <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">     <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">     <span class="attribute">background-color</span>: yellowgreen;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*主体元素inline-block化img本身是inline，</span></div><div class="line">但是里面的content为inline-block*/</div><div class="line"><span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">40%</span>; </div><div class="line">    <span class="attribute">vertical-align</span>:middle;         </div><div class="line">&#125;</div><div class="line"><span class="comment">/*宽度为0，高度100%的辅助元素*/</span></div><div class="line"><span class="selector-tag">i</span> &#123;</div><div class="line">     <span class="attribute">display</span>: inline-block;</div><div class="line">     <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">     <span class="attribute">vertical-align</span>:middle;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*给以上 img 和 i 元素添加 vertical-align:middle;  */</span></div></pre></td></tr></table></figure>
<p>实现垂直居中，效果如下：<br><img src="https://itwanggj.github.io/images/center.png" alt=""><br>b.大小不固定的文字垂直居中：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">span</span>&gt;</span>测试文字垂直居中<span class="tag">&lt;<span class="name">br</span>/&gt;</span>测试文字垂直居中<span class="tag">&lt;<span class="name">br</span>/&gt;</span>测试文字垂直居中<span class="tag">&lt;<span class="name">br</span>/&gt;</span>测试文字垂直居中<span class="tag">&lt;<span class="name">br</span>/&gt;</span>测试文字垂直居中<span class="tag">&lt;<span class="name">br</span>/&gt;</span>测试文字垂直居中<span class="tag">&lt;<span class="name">br</span>/&gt;</span>测试文字垂直居中<span class="tag">&lt;<span class="name">br</span>/&gt;</span>测试文字垂直居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">   width: 500px;</div><div class="line">   height: 200px;</div><div class="line">   background-color: yellowgreen;</div><div class="line">&#125;</div><div class="line">span &#123;</div><div class="line">     display: inline-block;</div><div class="line">     vertical-align:middle;         </div><div class="line">&#125;</div><div class="line">i &#123;</div><div class="line">     display: inline-block;</div><div class="line">     height: 100%;</div><div class="line">     vertical-align:middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了慕课网关于vertical-align的视频讲解，感觉讲的挺深，所以总结了一下&lt;br&gt;vertical-align的百分比值相对于line-height计算&lt;br&gt;IE6/7下line-height不支持小数&lt;/p&gt;
&lt;h2 id=&quot;vertical-align起作用的前提&quot;&gt;&lt;a href=&quot;#vertical-align起作用的前提&quot; class=&quot;headerlink&quot; title=&quot;vertical-align起作用的前提&quot;&gt;&lt;/a&gt;vertical-align起作用的前提&lt;/h2&gt;&lt;p&gt;该属性应用于inline水平或者table-cell元素&lt;/p&gt;
&lt;h3 id=&quot;inline水平&quot;&gt;&lt;a href=&quot;#inline水平&quot; class=&quot;headerlink&quot; title=&quot;inline水平&quot;&gt;&lt;/a&gt;inline水平&lt;/h3&gt;&lt;p&gt;inline:img,span,strong,em等&lt;br&gt;inline-block:input,button（ie8+，ie6/7会把inline-block当作inline）&lt;/p&gt;
&lt;h3 id=&quot;table-cell元素&quot;&gt;&lt;a href=&quot;#table-cell元素&quot; class=&quot;headerlink&quot; title=&quot;table-cell元素&quot;&gt;&lt;/a&gt;table-cell元素&lt;/h3&gt;&lt;p&gt;td&lt;br&gt;所以默认情况下支持vertical-align的有：图片，按钮，文字，单元格&lt;/p&gt;
&lt;h3 id=&quot;抛出一个问题&quot;&gt;&lt;a href=&quot;#抛出一个问题&quot; class=&quot;headerlink&quot; title=&quot;抛出一个问题&quot;&gt;&lt;/a&gt;抛出一个问题&lt;/h3&gt;&lt;p&gt;想实现图片的垂直居中&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;JS Bin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.insgeek.com/public/insgeek2.0/img/indexpec/enleft.jpg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;100&#39;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ccc&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;img&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;vertical-align&lt;/span&gt;:middle;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vertical-align" scheme="https://itwanggj.github.io/categories/vertical-align/"/>
    
      <category term="CSS" scheme="https://itwanggj.github.io/categories/vertical-align/CSS/"/>
    
    
      <category term="CSS" scheme="https://itwanggj.github.io/tags/CSS/"/>
    
      <category term="SASS" scheme="https://itwanggj.github.io/tags/SASS/"/>
    
      <category term="LESS" scheme="https://itwanggj.github.io/tags/LESS/"/>
    
      <category term="SCSS" scheme="https://itwanggj.github.io/tags/SCSS/"/>
    
  </entry>
  
  <entry>
    <title>前端自动化工程搭建--Gulp（Windows版）</title>
    <link href="https://itwanggj.github.io/2016/10/08/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA--Gulp/"/>
    <id>https://itwanggj.github.io/2016/10/08/前端自动化工程搭建--Gulp/</id>
    <published>2016-10-08T12:12:04.000Z</published>
    <updated>2017-03-01T13:00:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建准备工作"><a href="#搭建准备工作" class="headerlink" title="搭建准备工作"></a>搭建准备工作</h2><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>首先Gulp是基于Nodejs的，所以安装Nodejs是前提，Node可以说是前端神器，基于Node有各种各样的工具，正是因为这些工具让我们非常方便的构建前端工程。</p>
<h3 id="更改Node插件默认安装位置"><a href="#更改Node插件默认安装位置" class="headerlink" title="更改Node插件默认安装位置"></a>更改Node插件默认安装位置</h3><p>Windows电脑的话，我自己一般不喜欢在C盘安装太多与系统无关的东西，而通过Node自带的npm安装的插件默认在C盘，但是我将Node安装到D盘后，想让插件就安装在Nodejs的主目录下，怎么办呢？</p>
<ol>
<li>在Node主目录下新建”node_global”及”node_cache”两个文件夹</li>
<li>启动cmd，输入</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//后面的设置目录根据你的目录结构自行更改</div><div class="line">npm config <span class="built_in">set</span> prefix <span class="string">"D:\Program\nodejs\node_global"</span></div><div class="line">npm config <span class="built_in">set</span> cache <span class="string">"D:\Program\nodejs\node_cache"</span></div></pre></td></tr></table></figure>
<ol>
<li>关闭cmd，打开系统对话框，“我的电脑”右键“属性”-“高级系统设置”-“高级”-“环境变量”。</li>
<li>进入环境变量对话框，在系统变量下新建”NODE_PATH”，输入”D:\Program\nodejs\node_global\node_module”。 由于改变了module的默认地址，所以上面的用户变量都要跟着改变一下（用户变量”PATH”修改为”D:\Program\nodejs\node_global\”），要不使用module的时候会导致输入命令出现“xxx不是内部或外部命令，也不是可运行的程序或批处理文件”这个错误。</li>
</ol>
<p>经过这四步的设置就可以让安装的Node插件放在Nodejs的主目录了。</p>
<h3 id="安装Gulp"><a href="#安装Gulp" class="headerlink" title="安装Gulp"></a>安装Gulp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//全局安装Gulp</div><div class="line">npm install -g gulp</div><div class="line">//在项目中安装Gulp</div><div class="line">npm install --save-dev gulp</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>运行gulp -v,如果不报错，表示安装成功</p>
<p>然后在命令行运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure></p>
<p>让项目生产package.json文件</p>
<h3 id="搭建工程"><a href="#搭建工程" class="headerlink" title="搭建工程"></a>搭建工程</h3><p>众所周知，在开发工程中有开发和上线两个过程，在开发中，我们一般需要自动刷新以及实时编译，但是如果上线，我们就需要考虑很多优化的东西，比如文件编译压缩，静态资源放缓存处理等等问题，我自己搭的这个工程只涉及到文件编译压缩，实时刷新，静态资源放缓存这三个基本的流程。</p>
<p>在项目的目录结构如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">-------------------project</div><div class="line">    |</div><div class="line">    |--------------dist (该文件夹为打包生成的)</div><div class="line">    |   |</div><div class="line">    |   |----------css</div><div class="line">    |   |   |</div><div class="line">    |   |   |------index-9dcc24fe2e.css</div><div class="line">    |   |</div><div class="line">    |   |----------js</div><div class="line">    |   |   |</div><div class="line">    |   |   |------index-9dcc24fe2e.js</div><div class="line">    |   |----------index.html </div><div class="line">    |</div><div class="line">    |--------------src</div><div class="line">    |   |</div><div class="line">    |   |----------scss</div><div class="line">    |   |   |</div><div class="line">    |   |   |------index.scss</div><div class="line">    |   |</div><div class="line">    |   |----------js</div><div class="line">    |   |   |</div><div class="line">    |   |   |------index.js</div><div class="line">    |   |</div><div class="line">    |   |----------index.html</div><div class="line">    |--------------gulpfile.js</div><div class="line">    |--------------package.json</div></pre></td></tr></table></figure></p>
<h3 id="开发所用流程"><a href="#开发所用流程" class="headerlink" title="开发所用流程"></a>开发所用流程</h3><p>文件编译<br>在工程中准备使用scss作为css的预编译，所以需要利用gulp对scss进行编译，所以首先安装gulp-sass。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp-sass</div></pre></td></tr></table></figure></p>
<p>安装完成之后，直接在gulpfile.js引用配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const sass = require(<span class="string">'gulp-sass'</span>); //scss编译</div><div class="line">gulp.task(<span class="string">'scss:dev'</span>,()=&gt;&#123;</div><div class="line">    gulp.src(<span class="string">'src/scss/*.scss'</span>)</div><div class="line">    .pipe(sass())</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>)); //将生成好的css文件放到dist/css文件夹下</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这里简单介绍下gulp的两个api：</p>
<p>gulp.src()输入符合所提供的匹配模式或者匹配模式的数组的文件。将返回一个stream或者可以被piped到别的插件中。读文件</p>
<p>gulp.dest()能被pipe进来，并且将会写文件。并重新输出（emits）所有数据，因此可以将它pipe到多个文件夹，如果文件夹不存在则将会自动创建。写文件</p>
<h3 id="实时刷新"><a href="#实时刷新" class="headerlink" title="实时刷新"></a>实时刷新</h3><p>实现实时刷新的工具有很多，我自己使用browser-sync，这个工具的功能非常强大，想了解它更多的用法可以查看官网：<a href="http://www.browsersync.cn/" target="_blank" rel="external">http://www.browsersync.cn/</a>。<br>首先我们在项目中安装该模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev browser-sync</div></pre></td></tr></table></figure></p>
<p>根据官网的browser-sync与gulp的配置，得到如下配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const browserSync = require(<span class="string">'browser-sync'</span>).create(); //实时刷新</div><div class="line">const reload = browserSync.reload;</div><div class="line">gulp.task(<span class="string">'dev'</span>,[<span class="string">'scss:dev'</span>],<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">        server:&#123;</div><div class="line">            baseDir:<span class="string">'./'</span>  //设置服务器的根目录</div><div class="line">        &#125;,</div><div class="line">        <span class="built_in">log</span>Level: <span class="string">"debug"</span>,</div><div class="line">        <span class="built_in">log</span>Prefix:<span class="string">"dev"</span>,</div><div class="line">        browser:<span class="string">'chrome'</span>,</div><div class="line">        notify:<span class="literal">false</span> //开启静默模式</div><div class="line">    &#125;);</div><div class="line">    //使用gulp的监听功能，实现编译修改过后的文件</div><div class="line">    gulp.watch(<span class="string">'src/scss/*.scss'</span>,[<span class="string">'scss:dev'</span>]);</div><div class="line">    gulp.watch((<span class="string">'*.html'</span>)).on(<span class="string">'change'</span>,reload);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这样，一个简单的gulp开发流程就出来了，仅仅只是一个编译scss和一个实时刷新。</p>
<h3 id="打包上线所有流程"><a href="#打包上线所有流程" class="headerlink" title="打包上线所有流程"></a>打包上线所有流程</h3><p>打包上线，我们更多的是考虑，静态资源防缓存，优化。对css，js的压缩，对图片的处理，我写的这个简单的流程中并没有涉及对图片的处理，所以这里仅针对css，js，html处理。</p>
<p>压缩css我们使用gulp-sass就可以，因为它在编译scss的时候有一个配置选项可以直接输出被压缩的css。压缩js我使用了gulp-uglify，静态资源防缓存使用gulp-rev和gulp-rev-collector。</p>
<h3 id="对css，js的处理"><a href="#对css，js的处理" class="headerlink" title="对css，js的处理"></a>对css，js的处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//scss编译</div><div class="line">gulp.task(<span class="string">'css'</span>,()=&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/scss/*.scss'</span>)</div><div class="line">        .pipe(sass(&#123;</div><div class="line">            outputStyle: <span class="string">'compressed'</span>               //编译并输出压缩过的文件</div><div class="line">        &#125;))</div><div class="line">        .pipe(rev())                                //给css添加哈希值</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">        .pipe(rev.manifest())                       //给添加哈希值的文件添加到清单中</div><div class="line">        .pipe(gulp.dest(<span class="string">'rev/css'</span>));</div><div class="line">&#125;);</div><div class="line">//压缩js</div><div class="line">gulp.task(<span class="string">'js'</span>, ()=&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/js/*js'</span>)</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(rev())                                //给js添加哈希值</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>))</div><div class="line">        .pipe(rev.manifest())                       //给添加哈希值的文件添加到清单中</div><div class="line">        .pipe(gulp.dest(<span class="string">'rev/js'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>其中gulp-rev是为css文件名添加哈希值，而rev.manifest()会生成一个json文件，这个json文件中记录了原文件名和添加哈希值后的文件名的一个对应关系，这个对应关系在最后对应替换html的引用的时候会用到。</p>
<p>生成的json文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"index.css"</span>: <span class="string">"index-9dcc24fe2e.css"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于给文件添加了哈希值，所以每次编译出来的css和js都是不一样的，这会导致有很多冗余文件，所以我们可以每次在生成文件之前，先将原来的文件全部清空。</p>
<p>gulp中也有做这个工作的插件—gulp-clean，因此我们可以在编译压缩添加哈希值之前先将原文将清空。</p>
<h3 id="清空生成的项目文件"><a href="#清空生成的项目文件" class="headerlink" title="清空生成的项目文件"></a>清空生成的项目文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const clean = require(<span class="string">'gulp-clean'</span>);                 //清空文件夹里所有的文件</div><div class="line">//每次打包时先清空原有的文件夹</div><div class="line">gulp.task(<span class="string">'clean'</span>, ()=&gt; &#123;</div><div class="line">    gulp.src([<span class="string">'dist'</span>, <span class="string">'rev'</span>], &#123;<span class="built_in">read</span>: <span class="literal">false</span>&#125;) //这里设置的dist表示删除dist文件夹及其下所有文件</div><div class="line">        .pipe(clean());</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="让添加哈希编码的文件自动添加到html中"><a href="#让添加哈希编码的文件自动添加到html中" class="headerlink" title="让添加哈希编码的文件自动添加到html中"></a>让添加哈希编码的文件自动添加到html中</h3><p>前面提到的gulp-rev实现了给文件名添加哈希编码，但是在打包完成后如何让原来未添加哈希值的引用自动变为已经添加哈希值的引用，这里用到gulp-rev的一个插件gulp-rev-collector，配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//将处理过的css，js引入html</div><div class="line">gulp.task(<span class="string">'reCollector'</span>,()=&gt;&#123;</div><div class="line">    gulp.src([<span class="string">'rev/**/*.json'</span>,<span class="string">'src/*.html'</span>])</div><div class="line">        .pipe(reCollector(&#123;</div><div class="line">            replaceReved: <span class="literal">true</span>,  //模板中已经被替换的文件是否还能再被替换,默认是<span class="literal">false</span></div><div class="line">            dirReplacements: &#123;   //标识目录替换的集合, 因为gulp-rev创建的manifest文件不包含任何目录信息,</div><div class="line">                <span class="string">'css/'</span>: <span class="string">'/dist/css/'</span>,</div><div class="line">                <span class="string">'js/'</span>: <span class="string">'/dist/js/'</span></div><div class="line">            &#125;</div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>并没有正常替换？</p>
<p>在我自己写的时候，出现这个问题，运行完成该任务后，html中的css和js引用并没有发生变化，网上搜了半天，才知道是由于自己用了gulp-rename插件，然后将文件名都添加了.min（至于为什么添加，仅仅是因为是压缩过的，应该写个）而在自己写的html里面引用的文件并没有.min，由于gulp-rev-collector在替换的时候根据生成的json文件替换，在json中，文件都有了.min而在html中没有，所以无法匹配，自然也就不能实现替换了，所以在替换的时候一定要注意gulp-rev生成的json文件中的css，js与html中的引用的一样，否则无法实现替换。</p>
<h3 id="执行所有任务"><a href="#执行所有任务" class="headerlink" title="执行所有任务"></a>执行所有任务</h3><p>完成上面几个步骤后我们将所有任务串起来，让其可以一条命令然后全部执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'build'</span>,[<span class="string">'clean'</span>, <span class="string">'css'</span>, <span class="string">'js'</span>, <span class="string">'reCollector'</span>]);</div></pre></td></tr></table></figure></p>
<h3 id="再次理解gulp"><a href="#再次理解gulp" class="headerlink" title="再次理解gulp"></a>再次理解gulp</h3><p>gulp—它的task是顺序执行吗？</p>
<p>本以为到这里，就算是写完了，运行，完美，打包生成文件，再运行一次，报错了！！！！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[19:04:57] Finished <span class="string">'default'</span> after 7.38 μs</div><div class="line">stream.js:74</div><div class="line">      throw er; // Unhandled stream error <span class="keyword">in</span> pipe.</div><div class="line">      ^</div><div class="line">Error: ENOENT: no such file or directory, <span class="built_in">stat</span> <span class="string">'D:\project\dist\js\index-6045b384e6.min.js'</span></div><div class="line">    at Error (native)</div></pre></td></tr></table></figure></p>
<p>提示我找不到这个文件，这让我很郁闷啊，然后我分开执行，很ok，可以确定是执行顺序有问题，很可能在没有清理完成就执行后面了，查了gulp的官网文档才知道本身gulp的pipe是一个一个任务进行的，是同步的，但是每个task之间是不同步的，是一起进行的，这也验证了我的猜想，所以在网上找如何解决这个问题，找到一个叫run-sequence的npm插件，配置文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//进行打包上线</div><div class="line">gulp.task(<span class="string">'build'</span>, ()=&gt; &#123;</div><div class="line">    runSequence(<span class="string">'clean'</span>, [<span class="string">'css'</span>, <span class="string">'js'</span>], <span class="string">'reCollector'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>本以为运行就ok，结果，还是报错，这里就涉及到对gulp的另一个理解</p>
<p>run-sequence插件对异步任务的处理</p>
<p>在用这个插件让任务有序进行后，我想进一步直观的看到它对任务的序列化，自己写了一个demo，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'a'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(1);</div><div class="line">    &#125;,30);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'b'</span>,<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    console.log(2);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'ab'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    runSequence(<span class="string">'a'</span>,<span class="string">'b'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>但是这里就出现问题了，runSequence不管用了，找插件的说明和gulp官方文档，原来异步任务，像setTimeout，readFile等，需要添加一个callback的执行，这里的callback()就会返回一个promise的resolve()，告诉后面的任务，当前任务已经完成，后面可以继续执行了，所以在task a里面执行callback。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'a'</span>,<span class="keyword">function</span>(cb)&#123;</div><div class="line">    <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        console.log(1);</div><div class="line">        cb();</div><div class="line">    &#125;,30);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>那为什么前面写的那些任务不需要添加一个callback呢？由于gulp的pipe流让每一个task中的小任务（每一个pipe）顺序执行，从而整个pipe流是同步的，并不是异步任务，所以并不需要手动让其返回promise，run-sequence会自动帮我们管理。</p>
<h3 id="gulpfile的分离"><a href="#gulpfile的分离" class="headerlink" title="gulpfile的分离"></a>gulpfile的分离</h3><p>在前面我们将dev和build写在了一个叫gulpfile的文件中，虽然可以执行，但是当我们的工程越来越大的时候，会导致gulpfile可维护性降低，那能否让dev和build分别写在两个文件中呢？答案是可以的，我们可以新建两个文件，分别为gulpfile-dev.js和gulpfile-build.js，其实我们在运行gulp build的时候，其实是运行了gulp –gulpfile gulpfile.js build，前者相当于后者的缩写，所以在运行gulp的时候在命令中输入如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gulp --gulpfile gulpfile-dev.js</div><div class="line">gulp --gulpfile gulpfile-build.js</div></pre></td></tr></table></figure></p>
<p>就可以在gulp运行时候指定gulpfile。这样我们再原来的task中的buil和dev改成default就可以直接运行以上命令达到预期效果。</p>
<p>但是每次敲这么长的命令很烦，怎么办呢？我们可以在package.json的scripts中添加如下json：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dev"</span>: <span class="string">"gulp --gulpfile gulpfile-dev.js"</span></div><div class="line"><span class="string">"build"</span>: <span class="string">"gulp --gulpfile gulpfile-build.js"</span></div></pre></td></tr></table></figure></p>
<p>这样，我们在运行的时候，直接在命令行输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm run dev</div><div class="line">npm run build</div></pre></td></tr></table></figure></p>
<p>至此，我们就完成了一个简易的基于gulp的前端工程的搭建。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建准备工作&quot;&gt;&lt;a href=&quot;#搭建准备工作&quot; class=&quot;headerlink&quot; title=&quot;搭建准备工作&quot;&gt;&lt;/a&gt;搭建准备工作&lt;/h2&gt;&lt;h3 id=&quot;安装Node&quot;&gt;&lt;a href=&quot;#安装Node&quot; class=&quot;headerlink&quot; title=&quot;安装Node&quot;&gt;&lt;/a&gt;安装Node&lt;/h3&gt;&lt;p&gt;首先Gulp是基于Nodejs的，所以安装Nodejs是前提，Node可以说是前端神器，基于Node有各种各样的工具，正是因为这些工具让我们非常方便的构建前端工程。&lt;/p&gt;
&lt;h3 id=&quot;更改Node插件默认安装位置&quot;&gt;&lt;a href=&quot;#更改Node插件默认安装位置&quot; class=&quot;headerlink&quot; title=&quot;更改Node插件默认安装位置&quot;&gt;&lt;/a&gt;更改Node插件默认安装位置&lt;/h3&gt;&lt;p&gt;Windows电脑的话，我自己一般不喜欢在C盘安装太多与系统无关的东西，而通过Node自带的npm安装的插件默认在C盘，但是我将Node安装到D盘后，想让插件就安装在Nodejs的主目录下，怎么办呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Node主目录下新建”node_global”及”node_cache”两个文件夹&lt;/li&gt;
&lt;li&gt;启动cmd，输入&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//后面的设置目录根据你的目录结构自行更改&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm config &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; prefix &lt;span class=&quot;string&quot;&gt;&quot;D:\Program\nodejs\node_global&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm config &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; cache &lt;span class=&quot;string&quot;&gt;&quot;D:\Program\nodejs\node_cache&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;关闭cmd，打开系统对话框，“我的电脑”右键“属性”-“高级系统设置”-“高级”-“环境变量”。&lt;/li&gt;
&lt;li&gt;进入环境变量对话框，在系统变量下新建”NODE_PATH”，输入”D:\Program\nodejs\node_global\node_module”。 由于改变了module的默认地址，所以上面的用户变量都要跟着改变一下（用户变量”PATH”修改为”D:\Program\nodejs\node_global\”），要不使用module的时候会导致输入命令出现“xxx不是内部或外部命令，也不是可运行的程序或批处理文件”这个错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经过这四步的设置就可以让安装的Node插件放在Nodejs的主目录了。&lt;/p&gt;
&lt;h3 id=&quot;安装Gulp&quot;&gt;&lt;a href=&quot;#安装Gulp&quot; class=&quot;headerlink&quot; title=&quot;安装Gulp&quot;&gt;&lt;/a&gt;安装Gulp&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//全局安装Gulp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install -g gulp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//在项目中安装Gulp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install --save-dev gulp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="自动化构建工具" scheme="https://itwanggj.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Gulp" scheme="https://itwanggj.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/Gulp/"/>
    
    
      <category term="jQuery" scheme="https://itwanggj.github.io/tags/jQuery/"/>
    
      <category term="Bootstrap" scheme="https://itwanggj.github.io/tags/Bootstrap/"/>
    
      <category term="Gulp" scheme="https://itwanggj.github.io/tags/Gulp/"/>
    
      <category term="Grunt" scheme="https://itwanggj.github.io/tags/Grunt/"/>
    
  </entry>
  
  <entry>
    <title>jquery插件开发</title>
    <link href="https://itwanggj.github.io/2016/09/02/jquery%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>https://itwanggj.github.io/2016/09/02/jquery插件开发/</id>
    <published>2016-09-02T11:12:34.000Z</published>
    <updated>2017-03-01T14:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于公司需要写一个功能，而公司的中使用的框架是jquery，所以想到了开发jquery框架。</p>
<h2 id="1-jQuery插件开发方式"><a href="#1-jQuery插件开发方式" class="headerlink" title="1.jQuery插件开发方式"></a>1.jQuery插件开发方式</h2><p>jQuery插件开发方式主要有三种：<br>通过$.extend（），通过$.fn向jQuery添加新的方法，通过$weight（）应用jQueryUI的部件工厂方式创建</p>
<h2 id="2-插件中的this"><a href="#2-插件中的this" class="headerlink" title="2.插件中的this"></a>2.插件中的this</h2><p>在插件名字定义的这个函数内部，this指代的是在调用该插件时，用jQuery选择器选中的元素。这里的this已经是jQuery元素，无需再用美元符包装。</p>
<h2 id="3-jQuery链式调用"><a href="#3-jQuery链式调用" class="headerlink" title="3.jQuery链式调用"></a>3.jQuery链式调用</h2><p>jQuery支持链式调用，要让插件不打破这个链式调用，只需要return一下，实例如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">¥.fn.myPlugin = function()&#123;</div><div class="line">    //这里面this指的是jquery选中的元素</div><div class="line">    this.css(&apos;color&apos;,&apos;red&apos;);</div><div class="line">    return this.each(function()&#123;</div><div class="line">        //对每个元素进行操作</div><div class="line">        ¥(this).append(&apos; &apos;+¥(this).attr(&apos;href&apos;));</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="4-让插件接受参数"><a href="#4-让插件接受参数" class="headerlink" title="4.让插件接受参数"></a>4.让插件接受参数</h2><p>在处理插件参数的接收上，通常用jQuery的extend方法，当给extend传递单个对象时，这个对象会合并到jquery身上，直接可以调用，当给extend方法传递一个以上参数时，它会将所有参数对象合并<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">¥.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> defaults = &#123;</div><div class="line">        <span class="string">'color'</span>:<span class="string">'red'</span>,</div><div class="line">        <span class="string">'fontSize'</span>:<span class="string">'12px'</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> setting = ¥.extend(defaults,options);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.css(&#123;</div><div class="line">        <span class="string">'color'</span>:setting.color,</div><div class="line">        <span class="string">'fontSize'</span>:setting.fontSize</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>说明：由于博客markdown对“💲”有特殊处理，所以文中全部用“¥”替换。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于公司需要写一个功能，而公司的中使用的框架是jquery，所以想到了开发jquery框架。&lt;/p&gt;
&lt;h2 id=&quot;1-jQuery插件开发方式&quot;&gt;&lt;a href=&quot;#1-jQuery插件开发方式&quot; class=&quot;headerlink&quot; title=&quot;1.jQuery插件开发方式&quot;&gt;&lt;/a&gt;1.jQuery插件开发方式&lt;/h2&gt;&lt;p&gt;jQuery插件开发方式主要有三种：&lt;br&gt;通过$.extend（），通过$.fn向jQuery添加新的方法，通过$weight（）应用jQueryUI的部件工厂方式创建&lt;/p&gt;
&lt;h2 id=&quot;2-插件中的this&quot;&gt;&lt;a href=&quot;#2-插件中的this&quot; class=&quot;headerlink&quot; title=&quot;2.插件中的this&quot;&gt;&lt;/a&gt;2.插件中的this&lt;/h2&gt;&lt;p&gt;在插件名字定义的这个函数内部，this指代的是在调用该插件时，用jQuery选择器选中的元素。这里的this已经是jQuery元素，无需再用美元符包装。&lt;/p&gt;
&lt;h2 id=&quot;3-jQuery链式调用&quot;&gt;&lt;a href=&quot;#3-jQuery链式调用&quot; class=&quot;headerlink&quot; title=&quot;3.jQuery链式调用&quot;&gt;&lt;/a&gt;3.jQuery链式调用&lt;/h2&gt;&lt;p&gt;jQuery支持链式调用，要让插件不打破这个链式调用，只需要return一下，实例如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;¥.fn.myPlugin = function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //这里面this指的是jquery选中的元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    this.css(&amp;apos;color&amp;apos;,&amp;apos;red&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return this.each(function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //对每个元素进行操作&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ¥(this).append(&amp;apos; &amp;apos;+¥(this).attr(&amp;apos;href&amp;apos;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Jqery插件" scheme="https://itwanggj.github.io/categories/Jqery%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Javascript" scheme="https://itwanggj.github.io/categories/Jqery%E6%8F%92%E4%BB%B6/Javascript/"/>
    
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/tags/JavaScript/"/>
    
      <category term="Html" scheme="https://itwanggj.github.io/tags/Html/"/>
    
      <category term="jQuery" scheme="https://itwanggj.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>如何使用text-algin:justify实现文本两端对齐</title>
    <link href="https://itwanggj.github.io/2016/08/16/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8text-algin%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90/"/>
    <id>https://itwanggj.github.io/2016/08/16/如何使用text-algin实现文本两端对齐/</id>
    <published>2016-08-16T03:12:34.000Z</published>
    <updated>2017-03-01T14:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写页面的时候遇到了一个问题—当行文本双端对齐，大家都知道CSS属性中有一个“text-align:justify”，但是这个属性使用的时候，要求还是挺多的，尤其是要实现单行文本双端对齐。关于两端对齐，大漠和张鑫旭的博客中都有文章讲，非常不错，推荐给大家：<br><a href="http://www.zhangxinxu.com/wordpress/2011/03/displayinline-blocktext-alignjustify下列表的两端对齐布局/" target="_blank" rel="external">display:inline-block/text-align:justify下列表的两端对齐布局</a><br><a href="http://www.w3cplus.com/css/text-align-justify-and-rwd.html" target="_blank" rel="external">Text-align:Justify和RWD</a></p>
<h2 id="text-align-justify与text-align-last-justify"><a href="#text-align-justify与text-align-last-justify" class="headerlink" title="text-align:justify与text-align-last:justify"></a>text-align:justify与text-align-last:justify</h2><h3 id="1-text-align"><a href="#1-text-align" class="headerlink" title="1.text-align"></a>1.text-align</h3><p>MDN中这样介绍到：“text-align CSS属性定义行内内容（例如文字）如何相对它的块父元素对齐。text-align并不控制块元素自己的对齐，只控制它的行内内容的对齐。”从这里可以看出，控制文本居中对齐直接写text-align:justify就可以。但是这对于多行文本（即有文本换行）除了最后一行都可以实现两端对齐，最后一行依旧左对齐。所以就需要控制最后一行文本对齐方式的CSS属性：text-align-last。</p>
<h3 id="2-text-align-last"><a href="#2-text-align-last" class="headerlink" title="2.text-align-last"></a>2.text-align-last</h3><p>text-align-last 属性规定如何对齐文本的最后一行。但是这里注意一点text-align-last 属性只有在 text-align 属性设置为 “justify” 时才起作用。所以，利用这个属性就可以控制最后一行文本的对齐方式。我们可以想象，如果是单行文本，就可以当作最后一行文本处理，直接设置text-align-last:justify来实现当行文本两端对齐，可惜的是，这样的方法兼容性并不好。<br><img src="https://itwanggj.github.io/images/text-algin-last.png" alt=""><br><a id="more"></a></p>
<h3 id="利用CSS实现兼容性较好的两端对齐"><a href="#利用CSS实现兼容性较好的两端对齐" class="headerlink" title="利用CSS实现兼容性较好的两端对齐"></a>利用CSS实现兼容性较好的两端对齐</h3><p>从上面的分析可以知道，如果文本出现换行，则除最后一行的所有文本都会实现两端对齐。这时我们想到利用::after伪类，给元素最后设置一个看不见的内联元素，并设置宽度为100%，就可以让我们可以看到的单行文本让浏览器认为是多行文本，从而实现单行文本的两端对齐。具体实现代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"public"</span>&gt;</span>啊啊<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>:<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>aaaaaa<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"public"</span>&gt;</span>啊啊啊啊啊<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>:<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>aaaaaa<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"public"</span>&gt;</span>啊啊啊啊<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>:<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>aaaaaa<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.line</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">15px</span>;</div><div class="line">  <span class="attribute">margin</span>:<span class="number">5px</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.public</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">80px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">  <span class="attribute">display</span>:inline-block;</div><div class="line">  <span class="attribute">text-align</span>: justify;</div><div class="line">  <span class="attribute">vertical-align</span>:top;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#aaa</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.public</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://itwanggj.github.io/images/result.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写页面的时候遇到了一个问题—当行文本双端对齐，大家都知道CSS属性中有一个“text-align:justify”，但是这个属性使用的时候，要求还是挺多的，尤其是要实现单行文本双端对齐。关于两端对齐，大漠和张鑫旭的博客中都有文章讲，非常不错，推荐给大家：&lt;br&gt;&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/2011/03/displayinline-blocktext-alignjustify下列表的两端对齐布局/&quot;&gt;display:inline-block/text-align:justify下列表的两端对齐布局&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/css/text-align-justify-and-rwd.html&quot;&gt;Text-align:Justify和RWD&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;text-align-justify与text-align-last-justify&quot;&gt;&lt;a href=&quot;#text-align-justify与text-align-last-justify&quot; class=&quot;headerlink&quot; title=&quot;text-align:justify与text-align-last:justify&quot;&gt;&lt;/a&gt;text-align:justify与text-align-last:justify&lt;/h2&gt;&lt;h3 id=&quot;1-text-align&quot;&gt;&lt;a href=&quot;#1-text-align&quot; class=&quot;headerlink&quot; title=&quot;1.text-align&quot;&gt;&lt;/a&gt;1.text-align&lt;/h3&gt;&lt;p&gt;MDN中这样介绍到：“text-align CSS属性定义行内内容（例如文字）如何相对它的块父元素对齐。text-align并不控制块元素自己的对齐，只控制它的行内内容的对齐。”从这里可以看出，控制文本居中对齐直接写text-align:justify就可以。但是这对于多行文本（即有文本换行）除了最后一行都可以实现两端对齐，最后一行依旧左对齐。所以就需要控制最后一行文本对齐方式的CSS属性：text-align-last。&lt;/p&gt;
&lt;h3 id=&quot;2-text-align-last&quot;&gt;&lt;a href=&quot;#2-text-align-last&quot; class=&quot;headerlink&quot; title=&quot;2.text-align-last&quot;&gt;&lt;/a&gt;2.text-align-last&lt;/h3&gt;&lt;p&gt;text-align-last 属性规定如何对齐文本的最后一行。但是这里注意一点text-align-last 属性只有在 text-align 属性设置为 “justify” 时才起作用。所以，利用这个属性就可以控制最后一行文本的对齐方式。我们可以想象，如果是单行文本，就可以当作最后一行文本处理，直接设置text-align-last:justify来实现当行文本两端对齐，可惜的是，这样的方法兼容性并不好。&lt;br&gt;&lt;img src=&quot;https://itwanggj.github.io/images/text-algin-last.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="text-align" scheme="https://itwanggj.github.io/categories/text-align/"/>
    
      <category term="CSS" scheme="https://itwanggj.github.io/categories/text-align/CSS/"/>
    
    
      <category term="JavaScript" scheme="https://itwanggj.github.io/tags/JavaScript/"/>
    
      <category term="CSS" scheme="https://itwanggj.github.io/tags/CSS/"/>
    
      <category term="Html" scheme="https://itwanggj.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>SASS语法--高级</title>
    <link href="https://itwanggj.github.io/2016/07/13/SASS%E8%AF%AD%E6%B3%95--%E9%AB%98%E7%BA%A7/"/>
    <id>https://itwanggj.github.io/2016/07/13/SASS语法--高级/</id>
    <published>2016-07-13T03:02:24.000Z</published>
    <updated>2017-02-27T12:54:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://itwanggj.github.io/images/sass-script-advanced.png" alt=""><br>@if 三目运算</p>
<p>For explame:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$screenWidth: 500;</div><div class="line">body&#123;</div><div class="line">  color: if($screenWidth &gt; 768, blue, red);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is complied to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@if</p>
<p>For explame:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">if</span> $screenWidth &gt; <span class="number">768</span>&#123;</div><div class="line">  <span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>is complied to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@if…@else if…@else</p>
<p>For explame:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">if</span> $screenWidth &gt; <span class="number">768</span>&#123;</div><div class="line">  <span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">else</span> if $screenWidth &gt;<span class="number">400</span>&#123;</div><div class="line">  <span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">color</span>: green;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">else</span>&#123;</div><div class="line">  <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">color</span>: blue;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is complied to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">span</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@for</p>
<p>For explame:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@for $i from 1 to 5&#123;</div><div class="line">  .span#&#123;$i&#125;&#123;</div><div class="line">    width: 20% * $i;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is complied to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.span1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.span2</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.span3</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.span4</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>For explame:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@for $i from 1 through 5&#123;</div><div class="line">  .span#&#123;$i&#125;&#123;</div><div class="line">    width: 20% * $i;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>is complied to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.span1</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.span2</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.span3</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.span4</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.span5</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@while</p>
<p>For explame:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$j: 6;</div><div class="line">@while $j &gt; 0&#123;</div><div class="line">  .p#&#123;$j&#125;&#123;</div><div class="line">    width: 20% * $j;</div><div class="line">  &#125;</div><div class="line">  $j: $j - 3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is complied to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.p6</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">120%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.p3</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@each</p>
<p>For explame:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$k: 1;</div><div class="line">@each $c in blue, red, green &#123;</div><div class="line">  .div#&#123;$k&#125;&#123;</div><div class="line">    color: $c;</div><div class="line">  &#125;</div><div class="line">  $k: $k+1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is complied to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div1</span> &#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.div2</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.div3</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>For explame:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@each $key,$color in (default, blue), (info, green), (danger, red)&#123;</div><div class="line">  .text-#&#123;$key&#125;&#123;</div><div class="line">    color: $color;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is complied to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.text-default</span> &#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.text-info</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.text-danger</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>For explame:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@each $key, $value in (default: blue, info: green, danger: red)&#123;</div><div class="line">  .label-#&#123;$key&#125;&#123;</div><div class="line">    color: $value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is complied to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.label-default</span> &#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.label-info</span> &#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.label-danger</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://itwanggj.github.io/images/sass-script-advanced.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;@if 三目运算&lt;/p&gt;
&lt;p&gt;For explame:&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$screenWidth: 500;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;body&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  color: if($screenWidth &amp;gt; 768, blue, red);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;is complied to:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;@if&lt;/p&gt;
&lt;p&gt;For explame:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; $screenWidth &amp;gt; &lt;span class=&quot;number&quot;&gt;768&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SASS语法" scheme="https://itwanggj.github.io/categories/SASS%E8%AF%AD%E6%B3%95/"/>
    
      <category term="高级" scheme="https://itwanggj.github.io/categories/SASS%E8%AF%AD%E6%B3%95/%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="JS" scheme="https://itwanggj.github.io/tags/JS/"/>
    
      <category term="CSS" scheme="https://itwanggj.github.io/tags/CSS/"/>
    
      <category term="Sass" scheme="https://itwanggj.github.io/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>SASS语法--进阶</title>
    <link href="https://itwanggj.github.io/2016/06/02/SASS%E8%AF%AD%E6%B3%95--%E8%BF%9B%E9%98%B6/"/>
    <id>https://itwanggj.github.io/2016/06/02/SASS语法--进阶/</id>
    <published>2016-06-02T10:12:34.000Z</published>
    <updated>2017-02-27T12:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://itwanggj.github.io/images/sass-script-advanced.png" alt=""></p>
<h2 id="数字类型-Number"><a href="#数字类型-Number" class="headerlink" title="数字类型(Number)"></a>数字类型(Number)</h2><p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/*! 数字类型 */</div><div class="line">$n1: 1.2;</div><div class="line">$n2: 12;</div><div class="line">$n3: 14px;</div><div class="line"></div><div class="line">p&#123;</div><div class="line">  font-size: $n3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*! 数字类型 */</span></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="字符串类型-String"><a href="#字符串类型-String" class="headerlink" title="字符串类型(String)"></a>字符串类型(String)</h2><p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/*! 字符串类型*/</div><div class="line">$s1: container;</div><div class="line">$s2: 'container';</div><div class="line">$s3: "container";</div><div class="line"></div><div class="line">.#&#123;$s3&#125;&#123;</div><div class="line">  font-size: $n3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*! 字符串类型*/</span></div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="颜色类型"><a href="#颜色类型" class="headerlink" title="颜色类型"></a>颜色类型</h2><p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/*! 颜色类型*/</div><div class="line">$c1: blue;</div><div class="line">$c2: #fff;</div><div class="line">$c3: rgba(255,255,0,0.5);</div><div class="line"></div><div class="line">body&#123;</div><div class="line">  color: $c3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*! 颜色类型*/</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 255, 0, 0.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h2><p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/*! Bool类型*/</div><div class="line">$bt: ture;</div><div class="line">$bf: false;</div></pre></td></tr></table></figure></p>
<h2 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h2><p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/*! Null类型*/</div><div class="line">$null: null;</div><div class="line"></div><div class="line">body&#123;</div><div class="line">  @if $null == null&#123;</div><div class="line">    color: red;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*! Bool类型*/</span></div><div class="line"><span class="comment">/*! Null类型*/</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="变量操作"><a href="#变量操作" class="headerlink" title="变量操作"></a>变量操作</h2><p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$width1: 10px;</div><div class="line">$width2: 15px;</div><div class="line"></div><div class="line">span&#123;</div><div class="line">  width: $width1 - $width2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">span</span> &#123;</div><div class="line">  <span class="attribute">width</span>: -<span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>For example:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">  <span class="attribute">cursor</span>: e + -resize;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">cursor</span>: e-resize;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>For example:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"A"</span> + bc;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">  <span class="attribute">content</span>: A + <span class="string">'bc'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"Abc"</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: Abc;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">p&#123;</div><div class="line">  padding: 3px + 4px auto; </div><div class="line">&#125;</div><div class="line">$version: 3;</div><div class="line">p:before&#123;</div><div class="line">  content: 'Hello,Sass #&#123;$version&#125;';</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">7px</span> auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"Hello,Sass 3"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>For example:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">20px</span> / <span class="number">10px</span>;</div><div class="line">  <span class="attribute">width</span>: $width2 / <span class="number">2</span>; </div><div class="line">  <span class="attribute">width</span>: <span class="built_in">round</span>($width2) / <span class="number">2</span>;</div><div class="line">  <span class="attribute">height</span>: (<span class="number">100px</span> / <span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">20px</span> / <span class="number">10px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">7.5px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">7.5px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：<br>1.运算符之间的空格<br>2.相同运算单位<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*! Good*/</span></div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">3px</span> + <span class="number">4px</span> auto; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*! Bad*/</span></div><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">3px</span> + <span class="number">4px</span> auto; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*! Good*/</span></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">font</span>: (<span class="number">20px</span> / <span class="number">10px</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*! Bad*/</span></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">font</span>: (<span class="number">20px</span> / <span class="number">10em</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="minix"><a href="#minix" class="headerlink" title="minix"></a>minix</h2><p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@minix cont() &#123;</div><div class="line">  color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">body&#123;</div><div class="line">  @include cont();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@minix cont($color) &#123;</div><div class="line">  color: $color;</div><div class="line">&#125;</div><div class="line"></div><div class="line">body&#123;</div><div class="line">  @include cont(red);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@mixin cont($color: red, $fontSize: 14px)&#123;</div><div class="line">  color: $color;</div><div class="line">  font-size: $fontSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">body&#123;</div><div class="line">  @include cont($fontSize: 18px);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="传递多值参数"><a href="#传递多值参数" class="headerlink" title="传递多值参数"></a>传递多值参数</h2><p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@mixin box-shadow($shadow...)&#123;</div><div class="line">  -moz-box-shadow: $shadow;</div><div class="line">  -webkit-box-shadow: $shadow;</div><div class="line">  box-shadow: $shadow;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.shadows&#123;</div><div class="line">  @include box-shadow(0px 4px 4px #555, 2px 6px 10px #6dd3ee);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.shadows</span> &#123;</div><div class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">4px</span> <span class="number">#555</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#6dd3ee</span>;</div><div class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">4px</span> <span class="number">#555</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#6dd3ee</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">4px</span> <span class="number">#555</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#6dd3ee</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="传递内容"><a href="#传递内容" class="headerlink" title="传递内容"></a>传递内容</h2><p>For example:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> style-for-iphone&#123;</div><div class="line">  @<span class="keyword">media</span> only screen and (min-device-width: <span class="number">320px</span>) and (max-device-width:<span class="number">568px</span>)&#123;</div><div class="line">    @<span class="keyword">content</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">include</span> style-for-iphone&#123;</div><div class="line">  <span class="selector-tag">font-size</span>: 12<span class="selector-tag">px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> only screen and (min-device-width: <span class="number">320px</span>) and (max-device-width: <span class="number">568px</span>) &#123;</div><div class="line">  <span class="selector-tag">font-size</span>: 12<span class="selector-tag">px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用于响应式布局。</p>
<p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@function getzIndex($layer: default)&#123;</div><div class="line">  $zindexMap: (default: 1, modal: 1000, dropdown: 500, grid: 300);</div><div class="line">  $zindex: 1;</div><div class="line">  @if map-has-key($zindexMap, $layer)&#123;</div><div class="line">    $zindex: map-get($zindexMap, $layer);</div><div class="line">  &#125;</div><div class="line">  @return $zindex;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@debug getzIndex('afd');</div><div class="line">//$layer可选：default,modal,dropdown,grid</div></pre></td></tr></table></figure></p>
<p>嵌套语法</p>
<p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.main-sec &#123;</div><div class="line">  font-family: $main-sec-ff;</div><div class="line"></div><div class="line">  .headline &#123;</div><div class="line">    font: &#123;</div><div class="line">      family: $main-sec-ff;</div><div class="line">      size: 16px;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  .detail &#123;</div><div class="line">    font-size: 12px;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.main-sec</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main-sec</span> <span class="selector-class">.headline</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main-sec</span> <span class="selector-class">.detail</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://itwanggj.github.io/images/sass-script-advanced.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;数字类型-Number&quot;&gt;&lt;a href=&quot;#数字类型-Number&quot; class=&quot;headerlink&quot; title=&quot;数字类型(Number)&quot;&gt;&lt;/a&gt;数字类型(Number)&lt;/h2&gt;&lt;p&gt;For example:&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/*! 数字类型 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$n1: 1.2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$n2: 12;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$n3: 14px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;p&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  font-size: $n3;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;is compiled to:&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*! 数字类型 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;14px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;字符串类型-String&quot;&gt;&lt;a href=&quot;#字符串类型-String&quot; class=&quot;headerlink&quot; title=&quot;字符串类型(String)&quot;&gt;&lt;/a&gt;字符串类型(String)&lt;/h2&gt;&lt;p&gt;For example:&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/*! 字符串类型*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$s1: container;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$s2: &#39;container&#39;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$s3: &quot;container&quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.#&amp;#123;$s3&amp;#125;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  font-size: $n3;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SASS语法" scheme="https://itwanggj.github.io/categories/SASS%E8%AF%AD%E6%B3%95/"/>
    
      <category term="进阶" scheme="https://itwanggj.github.io/categories/SASS%E8%AF%AD%E6%B3%95/%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="JS" scheme="https://itwanggj.github.io/tags/JS/"/>
    
      <category term="CSS" scheme="https://itwanggj.github.io/tags/CSS/"/>
    
      <category term="Sass" scheme="https://itwanggj.github.io/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>SASS语法--基础</title>
    <link href="https://itwanggj.github.io/2016/05/15/SASS%E8%AF%AD%E6%B3%95--%E5%9F%BA%E7%A1%80/"/>
    <id>https://itwanggj.github.io/2016/05/15/SASS语法--基础/</id>
    <published>2016-05-15T12:32:34.000Z</published>
    <updated>2017-02-27T12:49:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://itwanggj.github.io/images/sass-script-advanced.png" alt=""></p>
<h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm init</div><div class="line"></div><div class="line">compass create --bare</div></pre></td></tr></table></figure>
<p>or<br>compass create –bare –sass-dir “sass” –css-dir “css” –images-dir “img” –javascripts-dir “js”</p>
<h2 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h2><p>在根目录下创建gulpfile.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm gulp gulp-compass browser-sync del run-sequence --save-dev</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>假如下载失败可修改：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm config git registry</div><div class="line"></div><div class="line">npm config set registry http:<span class="comment">//</span></div></pre></td></tr></table></figure></p>
<p>安装compass-normalize、breakpoint、susy<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install compass-normalize breakpoint susy</div></pre></td></tr></table></figure></p>
<p>在config.rb里分别引入<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">require "compass-normalize"</div><div class="line"># 响应式</div><div class="line">require "breakpoint"</div><div class="line"># 布局</div><div class="line">require "susy"</div></pre></td></tr></table></figure></p>
<p>main.scss<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*! Vendor */</span></div><div class="line">@<span class="keyword">import</span> </div><div class="line">  <span class="string">"compass"</span></div><div class="line">, <span class="string">"susy"</span></div><div class="line">, <span class="string">"breakpoint"</span></div><div class="line">, <span class="string">"normalize-version"</span>  </div><div class="line">, <span class="string">"normalize/base"</span></div><div class="line">, <span class="string">"normalize/links"</span></div><div class="line">, <span class="string">"normalize/html5"</span></div><div class="line">;</div><div class="line"></div><div class="line"><span class="comment">/*! Helpers */</span></div><div class="line">@<span class="keyword">import</span> </div><div class="line">  <span class="string">"helpers/variables"</span></div><div class="line">;</div><div class="line"></div><div class="line"><span class="comment">/*! Base*/</span></div><div class="line">@<span class="keyword">import</span> </div><div class="line">  <span class="string">"base/font"</span></div><div class="line">;</div><div class="line"></div><div class="line"><span class="comment">/*! Layout */</span></div><div class="line">@<span class="keyword">import</span> </div><div class="line">  <span class="string">"layout/main"</span></div><div class="line">;</div><div class="line"></div><div class="line"><span class="comment">/*! Components */</span> </div><div class="line">@<span class="keyword">import</span> </div><div class="line">  <span class="string">"components/alerts"</span></div><div class="line">, <span class="string">"components/pop-stripe"</span></div><div class="line">, <span class="string">"components/banner"</span></div><div class="line">, <span class="string">"components/page-header"</span></div><div class="line">, <span class="string">"components/section-bottom"</span></div><div class="line">, <span class="string">"components/contentinfo"</span></div><div class="line">;</div><div class="line"></div><div class="line"><span class="comment">/*! Pages*/</span></div><div class="line">@<span class="keyword">import</span> </div><div class="line">  <span class="string">"pages/page-base"</span></div><div class="line">, <span class="string">"pages/index"</span></div><div class="line">, <span class="string">"pages/install"</span></div><div class="line">, <span class="string">"pages/guide"</span></div><div class="line">, <span class="string">"pages/community"</span></div><div class="line">, <span class="string">"pages/libsass"</span></div><div class="line">;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://itwanggj.github.io/images/sass-script-advanced.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目创建&quot;&gt;&lt;a href=&quot;#项目创建&quot; class=&quot;headerlink&quot; title=&quot;项目创建&quot;&gt;&lt;/a&gt;项目创建&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm init&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;compass create --bare&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;or&lt;br&gt;compass create –bare –sass-dir “sass” –css-dir “css” –images-dir “img” –javascripts-dir “js”&lt;/p&gt;
&lt;h2 id=&quot;自动化构建&quot;&gt;&lt;a href=&quot;#自动化构建&quot; class=&quot;headerlink&quot; title=&quot;自动化构建&quot;&gt;&lt;/a&gt;自动化构建&lt;/h2&gt;&lt;p&gt;在根目录下创建gulpfile.js&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm gulp gulp-compass browser-sync del run-sequence --save-dev&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SASS语法" scheme="https://itwanggj.github.io/categories/SASS%E8%AF%AD%E6%B3%95/"/>
    
      <category term="基础" scheme="https://itwanggj.github.io/categories/SASS%E8%AF%AD%E6%B3%95/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JS" scheme="https://itwanggj.github.io/tags/JS/"/>
    
      <category term="CSS" scheme="https://itwanggj.github.io/tags/CSS/"/>
    
      <category term="Sass" scheme="https://itwanggj.github.io/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>SASS语法--安装</title>
    <link href="https://itwanggj.github.io/2016/05/05/SASS%E8%AF%AD%E6%B3%95--%E5%AE%89%E8%A3%85/"/>
    <id>https://itwanggj.github.io/2016/05/05/SASS语法--安装/</id>
    <published>2016-05-05T04:22:34.000Z</published>
    <updated>2017-02-27T12:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h2><p>Mac安装Ruby<br>Window安装Ruby</p>
<h2 id="安装Sass"><a href="#安装Sass" class="headerlink" title="安装Sass"></a>安装Sass</h2><p>修改Ruby镜像 -&gt; 淘宝Ruby镜像<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gem sources --remove https://rubygems.org/</div><div class="line">gem sources -a https://ruby.taobao.org/</div><div class="line">gem sources -l</div></pre></td></tr></table></figure></p>
<p>安装Sass<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">gem</span> <span class="selector-tag">install</span> <span class="selector-tag">sass</span></div><div class="line"><span class="selector-tag">sass</span> <span class="selector-tag">-v</span></div></pre></td></tr></table></figure></p>
<p>or<br>gem install sass —version=3.3</p>
<p>列出所有安装包<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">gem</span> <span class="selector-tag">list</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>卸载Sass<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem uninstall sass --version=3.3</div></pre></td></tr></table></figure></p>
<p>or<br>gem uninstall sass</p>
<p>编译Sass<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">sass</span> <span class="selector-tag">main</span><span class="selector-class">.scss</span> <span class="selector-tag">main</span><span class="selector-class">.css</span></div></pre></td></tr></table></figure></p>
<p>Compass安装<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">gem</span> <span class="selector-tag">install</span> <span class="selector-tag">compass</span></div><div class="line"></div><div class="line"><span class="selector-tag">compass</span> <span class="selector-tag">-v</span></div><div class="line"></div><div class="line"><span class="selector-tag">compass</span> <span class="selector-tag">create</span> <span class="selector-tag">learn-compass-init</span></div></pre></td></tr></table></figure></p>
<p>使用css原生@import的既定规则：</p>
<p>1.当@import后边跟的文件名是以.css结尾的时候<br>2.当@import后边跟的是”<a href="http://&quot;开头的字符串的时候" target="_blank" rel="external">http://&quot;开头的字符串的时候</a><br>3.当@import后边跟的是一个url()函数的时候<br>4.当@import后边带有media queries的时候</p>
<p>基于sass的既定规则</p>
<p>1.没有文件后缀名的时候.sass会添加.scss或者.sass的后缀；<br>2.同一目录下，局部文件和非局部文件不能重名。</p>
<p>变量操作</p>
<p>1.直接操作变量，即变量表达式。<br>2.通过函数<br>跟代码块无关的函数，多是自己内置函数@Function<br>可重用的代码块，称mixin<br>@include方式调用<br>@extend的方式调用</p>
<p>hsl</p>
<p>For example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@mixin col-6 &#123;</div><div class="line">  width: 50%;</div><div class="line">  float: left;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.webdemo-sec &#123;</div><div class="line">  @include col-6;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin col-6($width) &#123;</div><div class="line">  width: $width;</div><div class="line">  float: left;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.webdemo-sec &#123;</div><div class="line">  @include col-6(50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin col-6($width: 50) &#123;</div><div class="line">  width: $width;</div><div class="line">  float: left;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.webdemo-sec &#123;</div><div class="line">  @include col-6();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.webdemo-sec</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>extend两个知识点</p>
<p>1.extend不可以继承选择器序列<br>2.使用%，用来构建不用来继承的选择器。</p>
<p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.error &#123;</div><div class="line">  color: #f00;</div><div class="line">&#125;</div><div class="line">.serious-error &#123;</div><div class="line">  @extend .error;</div><div class="line">  border: 1px solid #f00;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.error</span>, <span class="selector-class">.serious-error</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.serious-error</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f00</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>For example:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">%error &#123;</div><div class="line">  color: #f00;</div><div class="line">&#125;</div><div class="line">.serious-error &#123;</div><div class="line">  @extend %error;</div><div class="line">  border: 1px solid #f00;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>is compiled to:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.serious-error</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f00</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compass核心模块</p>
<p>CSS3<br>Helpers<br>Typography<br>Utilities<br>@import “compass”;<br>Reset<br>@import “compass/reset”;<br>Layout<br>@import “compass/layout”;</p>
<p>Normalize核心模块<br>base<br>html5<br>links<br>typegraphy<br>embeds<br>groups<br>forms<br>tables<br>@import “normalize”;<br>or<br>@import “normalize/version”;<br>@import “normalize/base”;<br>@import “normailze/html5”;</p>
<p>Layout模块<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"compass/layout"</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">"compass/grid-background"</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">"compass/sticky-footer"</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">"compass/stretching"</span>;</div></pre></td></tr></table></figure></p>
<p>CSS3模块<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@import "compass/css3";</div><div class="line">@import "compass/support"</div><div class="line"></div><div class="line">$supported-browsers: chrome;</div><div class="line">$broer-minimum-versions: ("ie": "8");</div></pre></td></tr></table></figure></p>
<h3 id="链接推荐"><a href="#链接推荐" class="headerlink" title="链接推荐"></a>链接推荐</h3><p><a href="http://compass-style.org/reference/compass/reset/utilities/" target="_blank" rel="external">Compass/Utilities</a><br><a href="http://www.sass-lang.com" target="_blank" rel="external">Sass官网</a><br><a href="http://compass-style.org" target="_blank" rel="external">Compass官网</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Ruby&quot;&gt;&lt;a href=&quot;#安装Ruby&quot; class=&quot;headerlink&quot; title=&quot;安装Ruby&quot;&gt;&lt;/a&gt;安装Ruby&lt;/h2&gt;&lt;p&gt;Mac安装Ruby&lt;br&gt;Window安装Ruby&lt;/p&gt;
&lt;h2 id=&quot;安装Sass&quot;&gt;&lt;a href=&quot;#安装Sass&quot; class=&quot;headerlink&quot; title=&quot;安装Sass&quot;&gt;&lt;/a&gt;安装Sass&lt;/h2&gt;&lt;p&gt;修改Ruby镜像 -&amp;gt; 淘宝Ruby镜像&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;gem sources --remove https://rubygems.org/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gem sources -a https://ruby.taobao.org/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gem sources -l&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;安装Sass&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;sass&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;sass&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-v&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;or&lt;br&gt;gem install sass —version=3.3&lt;/p&gt;
&lt;p&gt;列出所有安装包&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;list&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SASS语法" scheme="https://itwanggj.github.io/categories/SASS%E8%AF%AD%E6%B3%95/"/>
    
      <category term="安装" scheme="https://itwanggj.github.io/categories/SASS%E8%AF%AD%E6%B3%95/%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="JS" scheme="https://itwanggj.github.io/tags/JS/"/>
    
      <category term="CSS" scheme="https://itwanggj.github.io/tags/CSS/"/>
    
      <category term="Sass" scheme="https://itwanggj.github.io/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>前端开发面试题整理以及解答思路</title>
    <link href="https://itwanggj.github.io/2016/04/01/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%E4%BB%A5%E5%8F%8A%E8%A7%A3%E7%AD%94%E6%80%9D%E8%B7%AF/"/>
    <id>https://itwanggj.github.io/2016/04/01/前端开发面试题整理以及解答思路/</id>
    <published>2016-04-01T02:32:22.000Z</published>
    <updated>2017-02-26T12:48:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在网上看了各种各样的前端面试题，感觉大部分其实都知道一点，但要真正表述恐怕又不能说得很好，所以这里简单整理一下解答思路</p>
<h2 id="一、HTML基础"><a href="#一、HTML基础" class="headerlink" title="一、HTML基础"></a>一、HTML基础</h2><h3 id="对HTML5的理解"><a href="#对HTML5的理解" class="headerlink" title="对HTML5的理解"></a>对HTML5的理解</h3><p>很大的一个问题，似乎每个人都能说上一点，但再深入就很看水平了，所以整理了HTML5的新特性，答题的时候应该抓住几个点入手：</p>
<ol>
<li>新标签<br>   多媒体的新标签： vedio,audio,embed<br>   语义化的新标签： article,header,footer,nav,section,figure</li>
<li>内联svg</li>
<li>拖放事件（drop和drag）</li>
<li>支持地理定位：navigator.geolocation.getCurrentPosition(showPosition)</li>
<li>表单的新属性：autocomplete, novalidate</li>
<li>web存储：localStorage,sessionStorage(关闭浏览器窗口后数据就会被删除)</li>
<li>WebSocket协议：在单个 TCP 连接上进行全双工通讯的协议</li>
</ol>
<h3 id="Web语义化的好处"><a href="#Web语义化的好处" class="headerlink" title="Web语义化的好处"></a>Web语义化的好处</h3><ol>
<li>方便爬虫读取，有利于SEO</li>
<li>增加代码可读性</li>
<li>屏幕阅读器（如果访客有视障）会完全根据你的标记来“读”你的网页</li>
<li>丢失样式的时候还能保持结构</li>
<li>手机等设备能以有意义的方式渲染网页(它们可能对CSS支持比较弱)</li>
</ol>
<a id="more"></a>
<h3 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h3><ol>
<li>建立sitemap.xml</li>
<li>使用语义化的标签</li>
<li>meta的keyword和description属性</li>
<li>尽量简洁url</li>
<li>外链</li>
</ol>
<h3 id="页面加载过程"><a href="#页面加载过程" class="headerlink" title="页面加载过程"></a>页面加载过程</h3><p>浏览器开启线程处理Http请求－&gt;DNS解析域名到IP地址-&gt;进行HTTP会话，客户端发送请求报头-&gt;进入服务端（Apache,tomcat,node.js等）-&gt;根据请求进入后端应用，找到请求处理-&gt;处理回馈报头，对比最后修改时间判断是否读缓存-&gt;下载html文档－&gt;建立文档树，加载CSS，JS文件－&gt;开始渲染DOM,执行JS</p>
<h2 id="二、CSS基础"><a href="#二、CSS基础" class="headerlink" title="二、CSS基础"></a>二、CSS基础</h2><h3 id="三列布局："><a href="#三列布局：" class="headerlink" title="三列布局："></a>三列布局：</h3><p>主要思路是中间元素左右padding，左右元素设置浮动，中间元素清除浮动</p>
<h3 id="CSS3动画"><a href="#CSS3动画" class="headerlink" title="CSS3动画"></a>CSS3动画</h3><p>CSS3有两种方式设置动画：</p>
<p>animation:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">animation-name</span>: <span class="selector-tag">none</span>  </div><div class="line"><span class="selector-tag">animation-duration</span>: 0<span class="selector-tag">s</span>  </div><div class="line"><span class="selector-tag">animation-timing-function</span>: <span class="selector-tag">ease</span>  </div><div class="line"><span class="selector-tag">animation-delay</span>: 0<span class="selector-tag">s</span>  </div><div class="line"><span class="selector-tag">animation-iteration-count</span>: 1</div><div class="line"><span class="selector-tag">animation-direction</span>: <span class="selector-tag">normal</span></div><div class="line"><span class="selector-tag">animation-fill-mode</span>: <span class="selector-tag">none</span></div></pre></td></tr></table></figure></p>
<p>利用keyframe写帧动画，再animation-name中指定并调用,animation再动画结束后是不改变属性值的</p>
<h3 id="CSS3布局方案"><a href="#CSS3布局方案" class="headerlink" title="CSS3布局方案"></a>CSS3布局方案</h3><p>关于flex布局：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">     <span class="attribute">display</span>: flex;</div><div class="line">     <span class="attribute">flex-direction</span>: 主轴方向</div><div class="line">     flex-wrap: 如何换行</div><div class="line">     justify-content： 主轴上的对齐方式</div><div class="line">     align-item: 交叉轴上的对齐方式</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.item</span> &#123;</div><div class="line">    <span class="attribute">flex-grow</span>: 放大比例</div><div class="line">    flex-shrink: 缩小比例</div><div class="line">    order: 顺序</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>tranistion:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transition-delay</span>: 0<span class="selector-tag">s</span>;</div><div class="line"><span class="selector-tag">transition-duration</span>: 0<span class="selector-tag">s</span>;</div><div class="line"><span class="selector-tag">transition-property</span>: <span class="selector-tag">all</span>;</div><div class="line"><span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">ease</span>;</div></pre></td></tr></table></figure></p>
<p>两个不同状态的插值渐变过程</p>
<h3 id="CSS选择器的优先级"><a href="#CSS选择器的优先级" class="headerlink" title="CSS选择器的优先级"></a>CSS选择器的优先级</h3><p>内联样式 &gt; id &gt; (类, 伪类, 属性) &gt; (标签, 伪元素)</p>
<h3 id="一些比较特殊的选择器："><a href="#一些比较特殊的选择器：" class="headerlink" title="一些比较特殊的选择器："></a>一些比较特殊的选择器：</h3><p>E ~ F：匹配任何在E元素之后的同级F元素, CSS3新增<br>E &gt; F：子元素选择器，匹配所有E元素的子元素F<br>E + F: 毗邻元素选择器，匹配所有紧随E元素之后的同级元素F<br>E:nth-child(n): 匹配其父元素的第n个子元素，CSS3新增<br>E:nth-last-child(n): 匹配其父元素的倒数第n个子元素，CSS3新增<br>E:nth-of-type(n): 匹配其父元素的第n个同标签子元素，CSS3新增<br>E:nth-last-of-type(n): 匹配其父元素的倒数第n个同标签子元素，CSS3新增</p>
<h3 id="background-相关属性"><a href="#background-相关属性" class="headerlink" title="background-*相关属性"></a>background-*相关属性</h3><p>就记录比较冷门的一些：<br>background-origin： 规定 background-position 属性相对于什么位置来定位 （border-box|padding-box|content-box）<br>background-clip: 规定绘制区域（border-box|padding-box|content-box）<br>background-attachment: 背景图像能否随其余部分的滚动而移动（scroll|fixed|inherit）</p>
<h3 id="关于BFC"><a href="#关于BFC" class="headerlink" title="关于BFC"></a>关于BFC</h3><p>BFC的形成,满足以下条件任意一个即可</p>
<ul>
<li>float 的值不为 none</li>
<li>position 的值不为 static 或者 relative</li>
<li>display 的值为 table-cell , table-caption , inline-block , flex , 或者 inline-flex 中的其中一个</li>
<li>overflow 的值不为 visible</li>
</ul>
<h3 id="BFC的性质"><a href="#BFC的性质" class="headerlink" title="BFC的性质"></a>BFC的性质</h3><p>在BFC中，每个盒子的左外边框紧挨着包含块的左边框</p>
<p>同一个BFC子元素外边距会折叠</p>
<p>BFC可以包含浮动</p>
<h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><p>一旦给其中的某个DIV进行FLOAT属性或者absolute定位（不包括static/relative，这两个依然保持正常的文档流），则它完全脱离文档流，不占空间</p>
<h3 id="层级关系的比较"><a href="#层级关系的比较" class="headerlink" title="层级关系的比较"></a>层级关系的比较</h3><ol>
<li>对于同级元素, 默认 (或 position:static) 情况下文档流后面的元素会覆盖前面的</li>
<li>对于同级元素, position 不为 static 且 z-index 存在的情况下 z-index 大的元素会覆盖 z-index 小的元素, 即 z-index 越大优先级越高.</li>
</ol>
<h2 id="三、JS基础"><a href="#三、JS基础" class="headerlink" title="三、JS基础"></a>三、JS基础</h2><h3 id="关于提升"><a href="#关于提升" class="headerlink" title="关于提升"></a>关于提升</h3><p>记住一句话即可：包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理</p>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>undefined, null, string, number, boolean</p>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>其实就是将函数作为参数或返回值的函数</p>
<h3 id="JSONP的原理"><a href="#JSONP的原理" class="headerlink" title="JSONP的原理"></a>JSONP的原理</h3><p>利用script标签的src没有跨域性质的特点，动态创建script标签，指定src为服务端数据api，并传入一个callback作为参数，返回的是一段javascript代码，将数据传入callback中执行</p>
<h3 id="原生ajax"><a href="#原生ajax" class="headerlink" title="原生ajax"></a>原生ajax</h3><p>xmlHttpRequest对象:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 兼容ie的xhr对象创建方法     </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createxhr</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>)&#123;</div><div class="line">        <span class="keyword">var</span> i,len,version=[<span class="string">"MSXML2.XMLHTTP.6.0"</span>, <span class="string">"MSXML2.XMLHTTP.3.0"</span>, <span class="string">"MSXML2.XMLHTTP"</span>];</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>,len=version.length;i&lt;len;i++)            &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">new</span> ActiveXObject(version[i]);</div><div class="line">                <span class="built_in">arguments</span>.callee.activeXString = version[i];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span>(ex) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"..."</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">xhr = createxhr();</div><div class="line">xhr.onreadystateChange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span> || xhr.status == <span class="number">304</span>) &#123;</div><div class="line">            ...</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">xhr.open(<span class="string">"get"</span>, url, <span class="literal">false</span>);</div><div class="line">xhr.send(<span class="literal">null</span>);</div></pre></td></tr></table></figure></p>
<h3 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h3><p>兼容ie的事件模型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil = &#123;</div><div class="line">    <span class="attr">addHandler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(element.addEventListener) &#123;</div><div class="line">            element.addEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent) &#123;</div><div class="line">            element.attachEvent(<span class="string">"on"</span> + type, handler);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            element[<span class="string">"on"</span> + type] = handler;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">removeHandler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(element.removeEventListener) &#123;</div><div class="line">            element.removeEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent) &#123;</div><div class="line">            element.detachEvent(<span class="string">"on"</span> + type, handler);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            element[<span class="string">"on"</span> + type] = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">getTarget</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> e.target || e.srcElement;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">getEvent</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">preventDefault</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(event.preventDefault) &#123;</div><div class="line">            event.preventDefault();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            event.returnValue = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">stopPropagation</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(event.stopPropagation) &#123;</div><div class="line">            event.stopPropagation();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            event.cancelBubble = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="AMD规范和CMD规范"><a href="#AMD规范和CMD规范" class="headerlink" title="AMD规范和CMD规范"></a>AMD规范和CMD规范</h3><p>诞生的原因：</p>
<ol>
<li>实现JS的异步加载，避免网页停止渲染</li>
<li>管理模块之间的依赖性，便于维护</li>
</ol>
<p>AMD提倡的是一种预加载，也就是说回调函数执行前模块需要全部加载好<br>CMD提倡的是延迟执行，加载模块通过在回调函数中调用require，依赖可以就近书写</p>
<h3 id="关于cookie和localstroage"><a href="#关于cookie和localstroage" class="headerlink" title="关于cookie和localstroage"></a>关于cookie和localstroage</h3><p>如何设置cookie<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"value=1"</span>;</div></pre></td></tr></table></figure></p>
<p>浏览器的cookie都有哪些字段</p>
<p>Name,Value,Domain,Path,Expires,Size</p>
<p>如何设置localstorage<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.localStroage.a = <span class="number">3</span>;</div><div class="line">localStorage.setItem(<span class="string">"value"</span>, <span class="string">"2"</span>);</div><div class="line">localStorage.getItem(<span class="string">"value"</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在网上看了各种各样的前端面试题，感觉大部分其实都知道一点，但要真正表述恐怕又不能说得很好，所以这里简单整理一下解答思路&lt;/p&gt;
&lt;h2 id=&quot;一、HTML基础&quot;&gt;&lt;a href=&quot;#一、HTML基础&quot; class=&quot;headerlink&quot; title=&quot;一、HTML基础&quot;&gt;&lt;/a&gt;一、HTML基础&lt;/h2&gt;&lt;h3 id=&quot;对HTML5的理解&quot;&gt;&lt;a href=&quot;#对HTML5的理解&quot; class=&quot;headerlink&quot; title=&quot;对HTML5的理解&quot;&gt;&lt;/a&gt;对HTML5的理解&lt;/h3&gt;&lt;p&gt;很大的一个问题，似乎每个人都能说上一点，但再深入就很看水平了，所以整理了HTML5的新特性，答题的时候应该抓住几个点入手：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新标签&lt;br&gt;   多媒体的新标签： vedio,audio,embed&lt;br&gt;   语义化的新标签： article,header,footer,nav,section,figure&lt;/li&gt;
&lt;li&gt;内联svg&lt;/li&gt;
&lt;li&gt;拖放事件（drop和drag）&lt;/li&gt;
&lt;li&gt;支持地理定位：navigator.geolocation.getCurrentPosition(showPosition)&lt;/li&gt;
&lt;li&gt;表单的新属性：autocomplete, novalidate&lt;/li&gt;
&lt;li&gt;web存储：localStorage,sessionStorage(关闭浏览器窗口后数据就会被删除)&lt;/li&gt;
&lt;li&gt;WebSocket协议：在单个 TCP 连接上进行全双工通讯的协议&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Web语义化的好处&quot;&gt;&lt;a href=&quot;#Web语义化的好处&quot; class=&quot;headerlink&quot; title=&quot;Web语义化的好处&quot;&gt;&lt;/a&gt;Web语义化的好处&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;方便爬虫读取，有利于SEO&lt;/li&gt;
&lt;li&gt;增加代码可读性&lt;/li&gt;
&lt;li&gt;屏幕阅读器（如果访客有视障）会完全根据你的标记来“读”你的网页&lt;/li&gt;
&lt;li&gt;丢失样式的时候还能保持结构&lt;/li&gt;
&lt;li&gt;手机等设备能以有意义的方式渲染网页(它们可能对CSS支持比较弱)&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端面试" scheme="https://itwanggj.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
      <category term="面试题总结" scheme="https://itwanggj.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Html" scheme="https://itwanggj.github.io/tags/Html/"/>
    
      <category term="jQuery" scheme="https://itwanggj.github.io/tags/jQuery/"/>
    
      <category term="Ionic" scheme="https://itwanggj.github.io/tags/Ionic/"/>
    
      <category term="css" scheme="https://itwanggj.github.io/tags/css/"/>
    
      <category term="js" scheme="https://itwanggj.github.io/tags/js/"/>
    
      <category term="bootstrap" scheme="https://itwanggj.github.io/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Http状态码</title>
    <link href="https://itwanggj.github.io/2016/03/17/Http%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>https://itwanggj.github.io/2016/03/17/Http状态码/</id>
    <published>2016-03-17T04:08:54.000Z</published>
    <updated>2017-02-26T07:05:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Http状态码"><a href="#Http状态码" class="headerlink" title="Http状态码"></a>Http状态码</h1><p>一些常见的状态代码为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">200 - 服务器成功返回网页</div><div class="line">404 - 请求的网页不存在</div><div class="line">503 - 服务器暂时不可用</div></pre></td></tr></table></figure></p>
<h2 id="1xx（临时响应）"><a href="#1xx（临时响应）" class="headerlink" title="1xx（临时响应）"></a>1xx（临时响应）</h2><p>用于表示临时响应并需要请求者执行操作才能继续的状态代码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">100（继续） 请求者应当继续提出请求。服务器返回此代码则意味着，服务器已收到了请求的第一部分，现正在等待接收其余部分。</div><div class="line">101（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备进行切换。</div></pre></td></tr></table></figure></p>
<h2 id="2xx（成功）"><a href="#2xx（成功）" class="headerlink" title="2xx（成功）"></a>2xx（成功）</h2><p>用于表示服务器已成功处理了请求的状态代码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">200（成功） 服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果您的 robots.txt 文件显示为此状态，那么，这表示 Googlebot 已成功检索到该文件。</div><div class="line">201（已创建） 请求成功且服务器已创建了新的资源。</div><div class="line">202（已接受） 服务器已接受了请求，但尚未对其进行处理。</div><div class="line">203（非授权信息） 服务器已成功处理了请求，但返回了可能来自另一来源的信息。</div><div class="line">204（无内容） 服务器成功处理了请求，但未返回任何内容。</div><div class="line">205（重置内容） 服务器成功处理了请求，但未返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如清除表单内容以输入新内容）。</div><div class="line">206（部分内容） 服务器成功处理了部分 GET 请求。</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="3xx（已重定向）"><a href="#3xx（已重定向）" class="headerlink" title="3xx（已重定向）"></a>3xx（已重定向）</h2><p>要完成请求，您需要进一步进行操作。通常，这些状态代码是永远重定向的。Google 建议您在每次请求时使用的重定向要少于 5 个。您可以使用网站管理员工具来查看 Googlebot 在抓取您已重定向的网页时是否会遇到问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">300（多种选择） 服务器根据请求可执行多种操作。服务器可根据请求者 (User agent) 来选择一项操作，或提供操作列表供请求者选择。</div><div class="line">301（永久移动） 请求的网页已被永久移动到新位置。服务器返回此响应（作为对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。您应使用此代码通知 Googlebot 某个网页或网站已被永久移动到新位置。</div><div class="line">302（临时移动） 服务器目前正从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置。但由于 Googlebot 会继续抓取原有位置并将其编入索引，因此您不应使用此代码来通知 Googlebot 某个页面或网站已被移动。</div><div class="line">303（查看其他位置） 当请求者应对不同的位置进行单独的 GET 请求以检索响应时，服务器会返回此代码。对于除 HEAD 请求之外的所有请求，服务器会自动转到其他位置。</div><div class="line">304（未修改） </div><div class="line">自从上次请求后，请求的网页未被修改过。服务器返回此响应时，不会返回网页内容。</div><div class="line">如果网页自请求者上次请求后再也没有更改过，您应当将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。由于服务器可以告诉 Googlebot 自从上次抓取后网页没有更改过，因此可节省带宽和开销</div><div class="line">305（使用代理） 请求者只能使用代理访问请求的网页。如果服务器返回此响应，那么，服务器还会指明请求者应当使用的代理。</div><div class="line">307（临时重定向） 服务器目前正从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置。但由于 Googlebot 会继续抓取原有位置并将其编入索引，因此您不应使用此代码来通知 Googlebot 某个页面或网站已被移动。</div></pre></td></tr></table></figure></p>
<h2 id="4xx（请求错误）"><a href="#4xx（请求错误）" class="headerlink" title="4xx（请求错误）"></a>4xx（请求错误）</h2><p>这些状态代码表示，请求可能出错，已妨碍了服务器对请求的处理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">400（错误请求） 服务器不理解请求的语法。</div><div class="line">401（未授权） 请求要求进行身份验证。登录后，服务器可能会返回对页面的此响应。</div><div class="line">403（已禁止） 服务器拒绝请求。如果在 Googlebot 尝试抓取您网站上的有效网页时显示此状态代码（您可在 Google 网站管理员工具中诊断下的网络抓取页面上看到此状态代码），那么，这可能是您的服务器或主机拒绝 Googlebot 对其进行访问。</div><div class="line">404（未找到） </div><div class="line">服务器找不到请求的网页。例如，如果请求是针对服务器上不存在的网页进行的，那么，服务器通常会返回此代码。</div><div class="line">如然而，如果您有 robots.txt 文件而又发现了此状态，那么，这说明您的 robots.txt 文件可能是命名错误或位于错误的位置。（该文件应当位于顶级域名上，且应当名为 robots.txt）。</div><div class="line">如果您在 Googlebot 尝试抓取的网址上发现此状态（位于<span class="string">"诊断"</span>标签的 HTTP 错误页上），那么，这表示 Googlebot 所追踪的可能是另一网页中的无效链接（旧链接或输入有误的链接）。</div><div class="line">405（方法禁用） 禁用请求中所指定的方法。</div><div class="line">406（不接受） 无法使用请求的内容特性来响应请求的网页。</div><div class="line">407（需要代理授权） 此状态代码与 401（未授权）类似，但却指定了请求者应当使用代理进行授权。如果服务器返回此响应，那么，服务器还会指明请求者应当使用的代理。</div><div class="line">408（请求超时） 服务器等候请求时超时。</div><div class="line">409（冲突） 服务器在完成请求时发生冲突。服务器必须包含有关响应中所发生的冲突的信息。服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，同时会提供两个请求的差异列表。</div><div class="line">410（已删除） 如果请求的资源已被永久删除，那么，服务器会返回此响应。该代码与 404（未找到）代码类似，但在资源以前有但现在已经不复存在的情况下，有时会替代 404 代码出现。如果资源已被永久删除，那么，您应当使用 301 代码指定该资源的新位置。</div><div class="line">411（需要有效长度） 服务器不会接受包含无效内容长度标头字段的请求。</div><div class="line">412（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</div><div class="line">413（请求实体过大） 服务器无法处理请求，因为请求实体过大，已超出服务器的处理能力。</div><div class="line">414（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法进行处理。</div><div class="line">415（不支持的媒体类型） 请求的格式不受请求页面的支持。</div><div class="line">416（请求范围不符合要求） 如果请求是针对网页的无效范围进行的，那么，服务器会返回此状态代码。</div><div class="line">417（未满足期望值） 服务器未满足<span class="string">"期望"</span>请求标头字段的要求。</div></pre></td></tr></table></figure></p>
<h2 id="5xx（服务器错误）"><a href="#5xx（服务器错误）" class="headerlink" title="5xx（服务器错误）"></a>5xx（服务器错误）</h2><p>这些状态代码表示，服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">500（服务器内部错误） 服务器遇到错误，无法完成请求。</div><div class="line">501（尚未实施） 服务器不具备完成请求的功能。例如，当服务器无法识别请求方法时，服务器可能会返回此代码。</div><div class="line">502（错误网关） 服务器作为网关或代理，从上游服务器收到了无效的响应。</div><div class="line">503（服务不可用） 目前无法使用服务器（由于超载或进行停机维护）。通常，这只是一种暂时的状态。</div><div class="line">504（网关超时） 服务器作为网关或代理，未及时从上游服务器接收请求。</div><div class="line">505（HTTP 版本不受支持） 服务器不支持请求中所使用的 HTTP 协议版本。</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Http状态码&quot;&gt;&lt;a href=&quot;#Http状态码&quot; class=&quot;headerlink&quot; title=&quot;Http状态码&quot;&gt;&lt;/a&gt;Http状态码&lt;/h1&gt;&lt;p&gt;一些常见的状态代码为：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;200 - 服务器成功返回网页&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;404 - 请求的网页不存在&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;503 - 服务器暂时不可用&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;1xx（临时响应）&quot;&gt;&lt;a href=&quot;#1xx（临时响应）&quot; class=&quot;headerlink&quot; title=&quot;1xx（临时响应）&quot;&gt;&lt;/a&gt;1xx（临时响应）&lt;/h2&gt;&lt;p&gt;用于表示临时响应并需要请求者执行操作才能继续的状态代码。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;100（继续） 请求者应当继续提出请求。服务器返回此代码则意味着，服务器已收到了请求的第一部分，现正在等待接收其余部分。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备进行切换。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;2xx（成功）&quot;&gt;&lt;a href=&quot;#2xx（成功）&quot; class=&quot;headerlink&quot; title=&quot;2xx（成功）&quot;&gt;&lt;/a&gt;2xx（成功）&lt;/h2&gt;&lt;p&gt;用于表示服务器已成功处理了请求的状态代码。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;200（成功） 服务器已成功处理了请求。通常，这表示服务器提供了请求的网页。如果您的 robots.txt 文件显示为此状态，那么，这表示 Googlebot 已成功检索到该文件。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;201（已创建） 请求成功且服务器已创建了新的资源。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;202（已接受） 服务器已接受了请求，但尚未对其进行处理。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;203（非授权信息） 服务器已成功处理了请求，但返回了可能来自另一来源的信息。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;204（无内容） 服务器成功处理了请求，但未返回任何内容。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;205（重置内容） 服务器成功处理了请求，但未返回任何内容。与 204 响应不同，此响应要求请求者重置文档视图（例如清除表单内容以输入新内容）。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;206（部分内容） 服务器成功处理了部分 GET 请求。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP状态码" scheme="https://itwanggj.github.io/categories/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
      <category term="Ajax请求" scheme="https://itwanggj.github.io/categories/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/Ajax%E8%AF%B7%E6%B1%82/"/>
    
    
      <category term="Http" scheme="https://itwanggj.github.io/tags/Http/"/>
    
      <category term="ajax" scheme="https://itwanggj.github.io/tags/ajax/"/>
    
      <category term="404" scheme="https://itwanggj.github.io/tags/404/"/>
    
  </entry>
  
</feed>
